// Mocks generated by Mockito 5.3.2 from annotations
// in decibel_sdk/test/test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:decibel_sdk/src/decibel_config.dart' as _i2;
import 'package:decibel_sdk/src/features/autoMasking/auto_masking_class.dart'
    as _i3;
import 'package:decibel_sdk/src/features/autoMasking/auto_masking_enums.dart'
    as _i12;
import 'package:decibel_sdk/src/features/manual_analytics/goals_and_dimensions.dart'
    as _i11;
import 'package:decibel_sdk/src/features/manual_analytics/http_errors.dart'
    as _i13;
import 'package:decibel_sdk/src/features/session_replay.dart' as _i9;
import 'package:decibel_sdk/src/features/tracking.dart' as _i6;
import 'package:decibel_sdk/src/messages.dart' as _i7;
import 'package:decibel_sdk/src/utility/logger_sdk.dart' as _i14;
import 'package:decibel_sdk/src/utility/placeholder_image.dart' as _i4;
import 'package:flutter/material.dart' as _i10;
import 'package:logger/logger.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMedalliaDxaConfig_0 extends _i1.SmartFake
    implements _i2.MedalliaDxaConfig {
  _FakeMedalliaDxaConfig_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAutoMasking_1 extends _i1.SmartFake implements _i3.AutoMasking {
  _FakeAutoMasking_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlaceholderImageConfig_2 extends _i1.SmartFake
    implements _i4.PlaceholderImageConfig {
  _FakePlaceholderImageConfig_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLogger_3 extends _i1.SmartFake implements _i5.Logger {
  _FakeLogger_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScreenVisited_4 extends _i1.SmartFake implements _i6.ScreenVisited {
  _FakeScreenVisited_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MedalliaDxaNativeApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockMedalliaDxaNativeApi extends _i1.Mock
    implements _i7.MedalliaDxaNativeApi {
  @override
  _i8.Future<void> initialize(_i7.SessionMessage? arg_msg) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [arg_msg],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> startScreen(_i7.StartScreenMessage? arg_msg) =>
      (super.noSuchMethod(
        Invocation.method(
          #startScreen,
          [arg_msg],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> endScreen(_i7.EndScreenMessage? arg_msg) =>
      (super.noSuchMethod(
        Invocation.method(
          #endScreen,
          [arg_msg],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> setEnableConsents(_i7.ConsentsMessage? arg_msg) =>
      (super.noSuchMethod(
        Invocation.method(
          #setEnableConsents,
          [arg_msg],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> setDisableConsents(_i7.ConsentsMessage? arg_msg) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDisableConsents,
          [arg_msg],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> saveScreenshot(_i7.ScreenshotMessage? arg_msg) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveScreenshot,
          [arg_msg],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> sendDimensionWithString(
          _i7.DimensionStringMessage? arg_msg) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendDimensionWithString,
          [arg_msg],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> sendDimensionWithNumber(
          _i7.DimensionNumberMessage? arg_msg) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendDimensionWithNumber,
          [arg_msg],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> sendDimensionWithBool(_i7.DimensionBoolMessage? arg_msg) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendDimensionWithBool,
          [arg_msg],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> sendGoal(_i7.GoalMessage? arg_msg) => (super.noSuchMethod(
        Invocation.method(
          #sendGoal,
          [arg_msg],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> sendDataOverWifiOnly() => (super.noSuchMethod(
        Invocation.method(
          #sendDataOverWifiOnly,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> sendHttpError(int? arg_msg) => (super.noSuchMethod(
        Invocation.method(
          #sendHttpError,
          [arg_msg],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> enableSessionForExperience(bool? arg_value) =>
      (super.noSuchMethod(
        Invocation.method(
          #enableSessionForExperience,
          [arg_value],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> enableSessionForAnalysis(bool? arg_value) =>
      (super.noSuchMethod(
        Invocation.method(
          #enableSessionForAnalysis,
          [arg_value],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> enableSessionForReplay(bool? arg_value) =>
      (super.noSuchMethod(
        Invocation.method(
          #enableSessionForReplay,
          [arg_value],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> enableScreenForAnalysis(bool? arg_value) =>
      (super.noSuchMethod(
        Invocation.method(
          #enableScreenForAnalysis,
          [arg_value],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<String> getWebViewProperties() => (super.noSuchMethod(
        Invocation.method(
          #getWebViewProperties,
          [],
        ),
        returnValue: _i8.Future<String>.value(''),
        returnValueForMissingStub: _i8.Future<String>.value(''),
      ) as _i8.Future<String>);
  @override
  _i8.Future<String> getSessionId() => (super.noSuchMethod(
        Invocation.method(
          #getSessionId,
          [],
        ),
        returnValue: _i8.Future<String>.value(''),
        returnValueForMissingStub: _i8.Future<String>.value(''),
      ) as _i8.Future<String>);
}

/// A class which mocks [SessionReplay].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionReplay extends _i1.Mock implements _i9.SessionReplay {
  @override
  _i2.MedalliaDxaConfig get medalliaDxaConfig => (super.noSuchMethod(
        Invocation.getter(#medalliaDxaConfig),
        returnValue: _FakeMedalliaDxaConfig_0(
          this,
          Invocation.getter(#medalliaDxaConfig),
        ),
        returnValueForMissingStub: _FakeMedalliaDxaConfig_0(
          this,
          Invocation.getter(#medalliaDxaConfig),
        ),
      ) as _i2.MedalliaDxaConfig);
  @override
  set medalliaDxaConfig(_i2.MedalliaDxaConfig? _medalliaDxaConfig) =>
      super.noSuchMethod(
        Invocation.setter(
          #medalliaDxaConfig,
          _medalliaDxaConfig,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.AutoMasking get autoMasking => (super.noSuchMethod(
        Invocation.getter(#autoMasking),
        returnValue: _FakeAutoMasking_1(
          this,
          Invocation.getter(#autoMasking),
        ),
        returnValueForMissingStub: _FakeAutoMasking_1(
          this,
          Invocation.getter(#autoMasking),
        ),
      ) as _i3.AutoMasking);
  @override
  set autoMasking(_i3.AutoMasking? _autoMasking) => super.noSuchMethod(
        Invocation.setter(
          #autoMasking,
          _autoMasking,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.PlaceholderImageConfig get placeholderImageConfig => (super.noSuchMethod(
        Invocation.getter(#placeholderImageConfig),
        returnValue: _FakePlaceholderImageConfig_2(
          this,
          Invocation.getter(#placeholderImageConfig),
        ),
        returnValueForMissingStub: _FakePlaceholderImageConfig_2(
          this,
          Invocation.getter(#placeholderImageConfig),
        ),
      ) as _i4.PlaceholderImageConfig);
  @override
  set placeholderImageConfig(
          _i4.PlaceholderImageConfig? _placeholderImageConfig) =>
      super.noSuchMethod(
        Invocation.setter(
          #placeholderImageConfig,
          _placeholderImageConfig,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set lastScreenshotSent(_i7.ScreenshotMessage? _lastScreenshotSent) =>
      super.noSuchMethod(
        Invocation.setter(
          #lastScreenshotSent,
          _lastScreenshotSent,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get alreadyWaitingForPostFrameCallback => (super.noSuchMethod(
        Invocation.getter(#alreadyWaitingForPostFrameCallback),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set alreadyWaitingForPostFrameCallback(
          bool? _alreadyWaitingForPostFrameCallback) =>
      super.noSuchMethod(
        Invocation.setter(
          #alreadyWaitingForPostFrameCallback,
          _alreadyWaitingForPostFrameCallback,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get waitingForEndOfFrame => (super.noSuchMethod(
        Invocation.getter(#waitingForEndOfFrame),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set waitingForEndOfFrame(bool? _waitingForEndOfFrame) => super.noSuchMethod(
        Invocation.setter(
          #waitingForEndOfFrame,
          _waitingForEndOfFrame,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Logger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLogger_3(
          this,
          Invocation.getter(#logger),
        ),
        returnValueForMissingStub: _FakeLogger_3(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i5.Logger);
  @override
  bool get currentlyTracking => (super.noSuchMethod(
        Invocation.getter(#currentlyTracking),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get recordingAllowedInThisScreen => (super.noSuchMethod(
        Invocation.getter(#recordingAllowedInThisScreen),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i6.ScreenVisited get currentTrackedScreen => (super.noSuchMethod(
        Invocation.getter(#currentTrackedScreen),
        returnValue: _FakeScreenVisited_4(
          this,
          Invocation.getter(#currentTrackedScreen),
        ),
        returnValueForMissingStub: _FakeScreenVisited_4(
          this,
          Invocation.getter(#currentTrackedScreen),
        ),
      ) as _i6.ScreenVisited);
  @override
  bool get didUiChange => (super.noSuchMethod(
        Invocation.getter(#didUiChange),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set didUiChange(bool? change) => super.noSuchMethod(
        Invocation.setter(
          #didUiChange,
          change,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<void> newScreen() => (super.noSuchMethod(
        Invocation.method(
          #newScreen,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  void start() => super.noSuchMethod(
        Invocation.method(
          #start,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void stop() => super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void clearMasks() => super.noSuchMethod(
        Invocation.method(
          #clearMasks,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<void> maybeTakeScreenshot() => (super.noSuchMethod(
        Invocation.method(
          #maybeTakeScreenshot,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> forceTakeScreenshot() => (super.noSuchMethod(
        Invocation.method(
          #forceTakeScreenshot,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> closeScreenVideo(_i6.ScreenVisited? screenVisited) =>
      (super.noSuchMethod(
        Invocation.method(
          #closeScreenVideo,
          [screenVisited],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> endScreenTasksCompleterWrapper(
          _i8.Future<void> Function()? function) =>
      (super.noSuchMethod(
        Invocation.method(
          #endScreenTasksCompleterWrapper,
          [function],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> waitForEndScreenTasksCompleter() => (super.noSuchMethod(
        Invocation.method(
          #waitForEndScreenTasksCompleter,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  void debugCheckIfDefunct(_i10.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #debugCheckIfDefunct,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool checkIfMounted(_i10.BuildContext? context) => (super.noSuchMethod(
        Invocation.method(
          #checkIfMounted,
          [context],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [GoalsAndDimensions].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoalsAndDimensions extends _i1.Mock
    implements _i11.GoalsAndDimensions {
  @override
  _i8.Future<void> setDimensionWithString(
    String? dimensionName,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDimensionWithString,
          [
            dimensionName,
            value,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> setDimensionWithNumber(
    String? dimensionName,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDimensionWithNumber,
          [
            dimensionName,
            value,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> setDimensionWithBool(
    String? dimensionName, {
    required bool? value,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDimensionWithBool,
          [dimensionName],
          {#value: value},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> sendGoal(
    String? goalName, [
    double? value,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendGoal,
          [
            goalName,
            value,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> endScreenTasksCompleterWrapper(
          _i8.Future<void> Function()? function) =>
      (super.noSuchMethod(
        Invocation.method(
          #endScreenTasksCompleterWrapper,
          [function],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> waitForEndScreenTasksCompleter() => (super.noSuchMethod(
        Invocation.method(
          #waitForEndScreenTasksCompleter,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  void debugCheckIfDefunct(_i10.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #debugCheckIfDefunct,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool checkIfMounted(_i10.BuildContext? context) => (super.noSuchMethod(
        Invocation.method(
          #checkIfMounted,
          [context],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [AutoMasking].
///
/// See the documentation for Mockito's code generation for more information.
class MockAutoMasking extends _i1.Mock implements _i3.AutoMasking {
  @override
  Set<_i10.RenderObject> get renderObjectsToMask => (super.noSuchMethod(
        Invocation.getter(#renderObjectsToMask),
        returnValue: <_i10.RenderObject>{},
        returnValueForMissingStub: <_i10.RenderObject>{},
      ) as Set<_i10.RenderObject>);
  @override
  _i5.Logger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLogger_3(
          this,
          Invocation.getter(#logger),
        ),
        returnValueForMissingStub: _FakeLogger_3(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i5.Logger);
  @override
  Set<_i12.AutoMaskingType> get autoMaskingTypeSet => (super.noSuchMethod(
        Invocation.getter(#autoMaskingTypeSet),
        returnValue: <_i12.AutoMaskingType>{},
        returnValueForMissingStub: <_i12.AutoMaskingType>{},
      ) as Set<_i12.AutoMaskingType>);
  @override
  set autoMaskingTypeSet(Set<_i12.AutoMaskingType>? value) =>
      super.noSuchMethod(
        Invocation.setter(
          #autoMaskingTypeSet,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeUnmaskedTypesFromAutoMaskingTypeSet(
          Set<_i12.AutoMaskingType>? set) =>
      super.noSuchMethod(
        Invocation.method(
          #removeUnmaskedTypesFromAutoMaskingTypeSet,
          [set],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setAutoMasking(_i10.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #setAutoMasking,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  Set<_i10.RenderObject> getRenderObjectsByAutoMaskingType(
    _i10.BuildContext? context,
    Set<_i12.AutoMaskingType>? widgetTypes,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRenderObjectsByAutoMaskingType,
          [
            context,
            widgetTypes,
          ],
        ),
        returnValue: <_i10.RenderObject>{},
        returnValueForMissingStub: <_i10.RenderObject>{},
      ) as Set<_i10.RenderObject>);
}

/// A class which mocks [HttpErrors].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpErrors extends _i1.Mock implements _i13.HttpErrors {
  @override
  _i8.Future<void> sendStatusCode(int? statusCode) => (super.noSuchMethod(
        Invocation.method(
          #sendStatusCode,
          [statusCode],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> endScreenTasksCompleterWrapper(
          _i8.Future<void> Function()? function) =>
      (super.noSuchMethod(
        Invocation.method(
          #endScreenTasksCompleterWrapper,
          [function],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> waitForEndScreenTasksCompleter() => (super.noSuchMethod(
        Invocation.method(
          #waitForEndScreenTasksCompleter,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  void debugCheckIfDefunct(_i10.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #debugCheckIfDefunct,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool checkIfMounted(_i10.BuildContext? context) => (super.noSuchMethod(
        Invocation.method(
          #checkIfMounted,
          [context],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [LoggerSDK].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggerSDK extends _i1.Mock implements _i14.LoggerSDK {
  @override
  bool get enabled => (super.noSuchMethod(
        Invocation.getter(#enabled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set enabled(bool? _enabled) => super.noSuchMethod(
        Invocation.setter(
          #enabled,
          _enabled,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get tracking => (super.noSuchMethod(
        Invocation.getter(#tracking),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set tracking(bool? _tracking) => super.noSuchMethod(
        Invocation.setter(
          #tracking,
          _tracking,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get sessionReplay => (super.noSuchMethod(
        Invocation.getter(#sessionReplay),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set sessionReplay(bool? _sessionReplay) => super.noSuchMethod(
        Invocation.setter(
          #sessionReplay,
          _sessionReplay,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get frameTracking => (super.noSuchMethod(
        Invocation.getter(#frameTracking),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set frameTracking(bool? _frameTracking) => super.noSuchMethod(
        Invocation.setter(
          #frameTracking,
          _frameTracking,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get routeObserver => (super.noSuchMethod(
        Invocation.getter(#routeObserver),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set routeObserver(bool? _routeObserver) => super.noSuchMethod(
        Invocation.setter(
          #routeObserver,
          _routeObserver,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get autoMasking => (super.noSuchMethod(
        Invocation.getter(#autoMasking),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set autoMasking(bool? _autoMasking) => super.noSuchMethod(
        Invocation.setter(
          #autoMasking,
          _autoMasking,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get screenWidget => (super.noSuchMethod(
        Invocation.getter(#screenWidget),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set screenWidget(bool? _screenWidget) => super.noSuchMethod(
        Invocation.setter(
          #screenWidget,
          _screenWidget,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get maskWidget => (super.noSuchMethod(
        Invocation.getter(#maskWidget),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set maskWidget(bool? _maskWidget) => super.noSuchMethod(
        Invocation.setter(
          #maskWidget,
          _maskWidget,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Logger get screenWidgetLogger => (super.noSuchMethod(
        Invocation.getter(#screenWidgetLogger),
        returnValue: _FakeLogger_3(
          this,
          Invocation.getter(#screenWidgetLogger),
        ),
        returnValueForMissingStub: _FakeLogger_3(
          this,
          Invocation.getter(#screenWidgetLogger),
        ),
      ) as _i5.Logger);
  @override
  _i5.Logger get maskWidgetLogger => (super.noSuchMethod(
        Invocation.getter(#maskWidgetLogger),
        returnValue: _FakeLogger_3(
          this,
          Invocation.getter(#maskWidgetLogger),
        ),
        returnValueForMissingStub: _FakeLogger_3(
          this,
          Invocation.getter(#maskWidgetLogger),
        ),
      ) as _i5.Logger);
  @override
  _i5.Logger get trackingLogger => (super.noSuchMethod(
        Invocation.getter(#trackingLogger),
        returnValue: _FakeLogger_3(
          this,
          Invocation.getter(#trackingLogger),
        ),
        returnValueForMissingStub: _FakeLogger_3(
          this,
          Invocation.getter(#trackingLogger),
        ),
      ) as _i5.Logger);
  @override
  _i5.Logger get sessionReplayLogger => (super.noSuchMethod(
        Invocation.getter(#sessionReplayLogger),
        returnValue: _FakeLogger_3(
          this,
          Invocation.getter(#sessionReplayLogger),
        ),
        returnValueForMissingStub: _FakeLogger_3(
          this,
          Invocation.getter(#sessionReplayLogger),
        ),
      ) as _i5.Logger);
  @override
  _i5.Logger get frameTrackingLogger => (super.noSuchMethod(
        Invocation.getter(#frameTrackingLogger),
        returnValue: _FakeLogger_3(
          this,
          Invocation.getter(#frameTrackingLogger),
        ),
        returnValueForMissingStub: _FakeLogger_3(
          this,
          Invocation.getter(#frameTrackingLogger),
        ),
      ) as _i5.Logger);
  @override
  _i5.Logger get routeObserverLogger => (super.noSuchMethod(
        Invocation.getter(#routeObserverLogger),
        returnValue: _FakeLogger_3(
          this,
          Invocation.getter(#routeObserverLogger),
        ),
        returnValueForMissingStub: _FakeLogger_3(
          this,
          Invocation.getter(#routeObserverLogger),
        ),
      ) as _i5.Logger);
  @override
  _i5.Logger get autoMaskingLogger => (super.noSuchMethod(
        Invocation.getter(#autoMaskingLogger),
        returnValue: _FakeLogger_3(
          this,
          Invocation.getter(#autoMaskingLogger),
        ),
        returnValueForMissingStub: _FakeLogger_3(
          this,
          Invocation.getter(#autoMaskingLogger),
        ),
      ) as _i5.Logger);
  @override
  void all({
    bool? enabled = true,
    bool? tracking = true,
    bool? sessionReplay = true,
    bool? frameTracking = true,
    bool? routeObserver = true,
    bool? autoMasking = true,
    bool? screenWidget = true,
    bool? maskWidget = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #all,
          [],
          {
            #enabled: enabled,
            #tracking: tracking,
            #sessionReplay: sessionReplay,
            #frameTracking: frameTracking,
            #routeObserver: routeObserver,
            #autoMasking: autoMasking,
            #screenWidget: screenWidget,
            #maskWidget: maskWidget,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void selected({
    required bool? enabled,
    required bool? tracking,
    required bool? sessionReplay,
    required bool? frameTracking,
    required bool? routeObserver,
    required bool? autoMasking,
    required bool? screenWidget,
    required bool? maskWidget,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #selected,
          [],
          {
            #enabled: enabled,
            #tracking: tracking,
            #sessionReplay: sessionReplay,
            #frameTracking: frameTracking,
            #routeObserver: routeObserver,
            #autoMasking: autoMasking,
            #screenWidget: screenWidget,
            #maskWidget: maskWidget,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void cleanLoggers() => super.noSuchMethod(
        Invocation.method(
          #cleanLoggers,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
