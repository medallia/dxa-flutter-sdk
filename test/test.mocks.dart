// Mocks generated by Mockito 5.4.0 from annotations
// in medallia_dxa/test/test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:collection' as _i11;
import 'dart:developer' as _i33;
import 'dart:typed_data' as _i22;
import 'dart:ui' as _i12;

import 'package:flutter/foundation.dart' as _i17;
import 'package:flutter/material.dart' as _i6;
import 'package:flutter/scheduler.dart' as _i7;
import 'package:logger/logger.dart' as _i9;
import 'package:medallia_dxa/src/features/autoMasking/auto_masking_class.dart'
    as _i4;
import 'package:medallia_dxa/src/features/autoMasking/auto_masking_enums.dart'
    as _i24;
import 'package:medallia_dxa/src/features/config/medallia_dxa_class_interface.dart'
    as _i20;
import 'package:medallia_dxa/src/features/config/medallia_dxa_config.dart'
    as _i13;
import 'package:medallia_dxa/src/features/config/public_methods.dart' as _i3;
import 'package:medallia_dxa/src/features/consents.dart' as _i19;
import 'package:medallia_dxa/src/features/event_channel/classes/live_configuration.dart'
    as _i16;
import 'package:medallia_dxa/src/features/event_channel/classes/performance_metrics.dart'
    as _i15;
import 'package:medallia_dxa/src/features/event_channel/event_channel_manager.dart'
    as _i31;
import 'package:medallia_dxa/src/features/frame_tracking.dart' as _i27;
import 'package:medallia_dxa/src/features/image_quality.dart' as _i32;
import 'package:medallia_dxa/src/features/manual_analytics/goals_and_dimensions.dart'
    as _i23;
import 'package:medallia_dxa/src/features/manual_analytics/http_errors.dart'
    as _i25;
import 'package:medallia_dxa/src/features/session_replay/screenshot_taker.dart'
    as _i5;
import 'package:medallia_dxa/src/features/session_replay/session_replay.dart'
    as _i21;
import 'package:medallia_dxa/src/features/tracking/route_tree_constructor.dart'
    as _i30;
import 'package:medallia_dxa/src/features/tracking/screen_visited.dart' as _i14;
import 'package:medallia_dxa/src/features/tracking/tracking.dart' as _i10;
import 'package:medallia_dxa/src/messages.dart' as _i2;
import 'package:medallia_dxa/src/utility/completer_wrappers.dart' as _i29;
import 'package:medallia_dxa/src/utility/global_settings.dart' as _i18;
import 'package:medallia_dxa/src/utility/logger_sdk.dart' as _i26;
import 'package:medallia_dxa/src/utility/placeholder_image.dart' as _i28;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLiveConfigurationPigeon_0 extends _i1.SmartFake
    implements _i2.LiveConfigurationPigeon {
  _FakeLiveConfigurationPigeon_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePublicMethodsMedalliaConfig_1 extends _i1.SmartFake
    implements _i3.PublicMethodsMedalliaConfig {
  _FakePublicMethodsMedalliaConfig_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAutoMasking_2 extends _i1.SmartFake implements _i4.AutoMasking {
  _FakeAutoMasking_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScreenshotTaker_3 extends _i1.SmartFake
    implements _i5.ScreenshotTaker {
  _FakeScreenshotTaker_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidgetsBinding_4 extends _i1.SmartFake
    implements _i6.WidgetsBinding {
  _FakeWidgetsBinding_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSchedulerBinding_5 extends _i1.SmartFake
    implements _i7.SchedulerBinding {
  _FakeSchedulerBinding_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTimer_6 extends _i1.SmartFake implements _i8.Timer {
  _FakeTimer_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLogger_7 extends _i1.SmartFake implements _i9.Logger {
  _FakeLogger_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTracking_8 extends _i1.SmartFake implements _i10.Tracking {
  _FakeTracking_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_9<T> extends _i1.SmartFake implements _i8.Future<T> {
  _FakeFuture_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCompleter_10<T> extends _i1.SmartFake implements _i8.Completer<T> {
  _FakeCompleter_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamController_11<T> extends _i1.SmartFake
    implements _i8.StreamController<T> {
  _FakeStreamController_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHashMap_12<K, V> extends _i1.SmartFake
    implements _i11.HashMap<K, V> {
  _FakeHashMap_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSize_13 extends _i1.SmartFake implements _i12.Size {
  _FakeSize_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMedalliaDxaConfig_14 extends _i1.SmartFake
    implements _i13.MedalliaDxaConfig {
  _FakeMedalliaDxaConfig_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScreenVisited_15 extends _i1.SmartFake
    implements _i14.ScreenVisited {
  _FakeScreenVisited_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePerformanceMetrics_16 extends _i1.SmartFake
    implements _i15.PerformanceMetrics {
  _FakePerformanceMetrics_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLiveConfiguration_17 extends _i1.SmartFake
    implements _i16.LiveConfiguration {
  _FakeLiveConfiguration_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeElement_18 extends _i1.SmartFake implements _i6.Element {
  _FakeElement_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString(
          {_i17.DiagnosticLevel? minLevel = _i17.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeScreenVisitedFinished_19 extends _i1.SmartFake
    implements _i14.ScreenVisitedFinished {
  _FakeScreenVisitedFinished_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDefaultGlobalSettings_20 extends _i1.SmartFake
    implements _i18.DefaultGlobalSettings {
  _FakeDefaultGlobalSettings_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_21 extends _i1.SmartFake implements Duration {
  _FakeDuration_21(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeColor_22 extends _i1.SmartFake implements _i12.Color {
  _FakeColor_22(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRouteObserver_23<R extends _i6.Route<dynamic>> extends _i1.SmartFake
    implements _i6.RouteObserver<R> {
  _FakeRouteObserver_23(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRoute_24<T> extends _i1.SmartFake implements _i6.Route<T> {
  _FakeRoute_24(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBuildContext_25 extends _i1.SmartFake implements _i6.BuildContext {
  _FakeBuildContext_25(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_26 extends _i1.SmartFake implements _i6.Widget {
  _FakeWidget_26(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString(
          {_i17.DiagnosticLevel? minLevel = _i17.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_27 extends _i1.SmartFake
    implements _i6.InheritedWidget {
  _FakeInheritedWidget_27(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString(
          {_i17.DiagnosticLevel? minLevel = _i17.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_28 extends _i1.SmartFake
    implements _i17.DiagnosticsNode {
  _FakeDiagnosticsNode_28(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i17.TextTreeConfiguration? parentConfiguration,
    _i17.DiagnosticLevel? minLevel = _i17.DiagnosticLevel.info,
  }) =>
      super.toString();
}

class _FakeSingletonFlutterWindow_29 extends _i1.SmartFake
    implements _i12.SingletonFlutterWindow {
  _FakeSingletonFlutterWindow_29(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlatformDispatcher_30 extends _i1.SmartFake
    implements _i12.PlatformDispatcher {
  _FakePlatformDispatcher_30(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MedalliaDxaNativeApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockMedalliaDxaNativeApi extends _i1.Mock
    implements _i2.MedalliaDxaNativeApi {
  @override
  _i8.Future<_i2.LiveConfigurationPigeon> initialize(
          _i2.SessionMessage? arg_msg) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [arg_msg],
        ),
        returnValue: _i8.Future<_i2.LiveConfigurationPigeon>.value(
            _FakeLiveConfigurationPigeon_0(
          this,
          Invocation.method(
            #initialize,
            [arg_msg],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.LiveConfigurationPigeon>.value(
                _FakeLiveConfigurationPigeon_0(
          this,
          Invocation.method(
            #initialize,
            [arg_msg],
          ),
        )),
      ) as _i8.Future<_i2.LiveConfigurationPigeon>);
  @override
  _i8.Future<void> startScreen(_i2.StartScreenMessage? arg_msg) =>
      (super.noSuchMethod(
        Invocation.method(
          #startScreen,
          [arg_msg],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> endScreen(_i2.EndScreenMessage? arg_msg) =>
      (super.noSuchMethod(
        Invocation.method(
          #endScreen,
          [arg_msg],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> setConsents(int? arg_value) => (super.noSuchMethod(
        Invocation.method(
          #setConsents,
          [arg_value],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> saveScreenshot(_i2.ScreenshotMessage? arg_msg) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveScreenshot,
          [arg_msg],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> sendDimensionWithString(
          _i2.DimensionStringMessage? arg_msg) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendDimensionWithString,
          [arg_msg],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> sendDimensionWithNumber(
          _i2.DimensionNumberMessage? arg_msg) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendDimensionWithNumber,
          [arg_msg],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> sendDimensionWithBool(_i2.DimensionBoolMessage? arg_msg) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendDimensionWithBool,
          [arg_msg],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> sendGoal(_i2.GoalMessage? arg_msg) => (super.noSuchMethod(
        Invocation.method(
          #sendGoal,
          [arg_msg],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> sendDataOverWifiOnly() => (super.noSuchMethod(
        Invocation.method(
          #sendDataOverWifiOnly,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> sendHttpError(int? arg_msg) => (super.noSuchMethod(
        Invocation.method(
          #sendHttpError,
          [arg_msg],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> sendImageQuality(int? arg_imageQuality) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendImageQuality,
          [arg_imageQuality],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> enableSessionForExperience(bool? arg_value) =>
      (super.noSuchMethod(
        Invocation.method(
          #enableSessionForExperience,
          [arg_value],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> enableSessionForAnalysis(bool? arg_value) =>
      (super.noSuchMethod(
        Invocation.method(
          #enableSessionForAnalysis,
          [arg_value],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> enableSessionForReplay(bool? arg_value) =>
      (super.noSuchMethod(
        Invocation.method(
          #enableSessionForReplay,
          [arg_value],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> enableScreenForAnalysis(bool? arg_value) =>
      (super.noSuchMethod(
        Invocation.method(
          #enableScreenForAnalysis,
          [arg_value],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<String> getWebViewProperties() => (super.noSuchMethod(
        Invocation.method(
          #getWebViewProperties,
          [],
        ),
        returnValue: _i8.Future<String>.value(''),
        returnValueForMissingStub: _i8.Future<String>.value(''),
      ) as _i8.Future<String>);
  @override
  _i8.Future<String> getSessionId() => (super.noSuchMethod(
        Invocation.method(
          #getSessionId,
          [],
        ),
        returnValue: _i8.Future<String>.value(''),
        returnValueForMissingStub: _i8.Future<String>.value(''),
      ) as _i8.Future<String>);
  @override
  _i8.Future<String> getSessionUrl() => (super.noSuchMethod(
        Invocation.method(
          #getSessionUrl,
          [],
        ),
        returnValue: _i8.Future<String>.value(''),
        returnValueForMissingStub: _i8.Future<String>.value(''),
      ) as _i8.Future<String>);
}

/// A class which mocks [MedalliaDxaConfig].
///
/// See the documentation for Mockito's code generation for more information.
class MockMedalliaDxaConfig extends _i1.Mock implements _i13.MedalliaDxaConfig {
  @override
  _i19.MedalliaDxaCustomerConsentType get lastConsents => (super.noSuchMethod(
        Invocation.getter(#lastConsents),
        returnValue: _i19.MedalliaDxaCustomerConsentType.recordingAndTracking,
        returnValueForMissingStub:
            _i19.MedalliaDxaCustomerConsentType.recordingAndTracking,
      ) as _i19.MedalliaDxaCustomerConsentType);
  @override
  set lastConsents(_i19.MedalliaDxaCustomerConsentType? _lastConsents) =>
      super.noSuchMethod(
        Invocation.setter(
          #lastConsents,
          _lastConsents,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get sdkVersion => (super.noSuchMethod(
        Invocation.getter(#sdkVersion),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  set sdkVersion(String? _sdkVersion) => super.noSuchMethod(
        Invocation.setter(
          #sdkVersion,
          _sdkVersion,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.PublicMethodsMedalliaConfig get publicMethods => (super.noSuchMethod(
        Invocation.getter(#publicMethods),
        returnValue: _FakePublicMethodsMedalliaConfig_1(
          this,
          Invocation.getter(#publicMethods),
        ),
        returnValueForMissingStub: _FakePublicMethodsMedalliaConfig_1(
          this,
          Invocation.getter(#publicMethods),
        ),
      ) as _i3.PublicMethodsMedalliaConfig);
  @override
  bool get recordingAllowed => (super.noSuchMethod(
        Invocation.getter(#recordingAllowed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get trackingAllowed => (super.noSuchMethod(
        Invocation.getter(#trackingAllowed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get blocked => (super.noSuchMethod(
        Invocation.getter(#blocked),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isSdkRunning => (super.noSuchMethod(
        Invocation.getter(#isSdkRunning),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i8.Future<void> initialize({required _i20.DxaConfig? dxaConfig}) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
          {#dxaConfig: dxaConfig},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  void setTrackingDisabledScreenList(List<String>? trackingDisabledScreens) =>
      super.noSuchMethod(
        Invocation.method(
          #setTrackingDisabledScreenList,
          [trackingDisabledScreens],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setRecordingDisabledScreenList(List<String>? recordingDisabledScreens) =>
      super.noSuchMethod(
        Invocation.method(
          #setRecordingDisabledScreenList,
          [recordingDisabledScreens],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<void> blockSdk() => (super.noSuchMethod(
        Invocation.method(
          #blockSdk,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> unblockSdk() => (super.noSuchMethod(
        Invocation.method(
          #unblockSdk,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [SessionReplay].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionReplay extends _i1.Mock implements _i21.SessionReplay {
  @override
  _i4.AutoMasking get autoMasking => (super.noSuchMethod(
        Invocation.getter(#autoMasking),
        returnValue: _FakeAutoMasking_2(
          this,
          Invocation.getter(#autoMasking),
        ),
        returnValueForMissingStub: _FakeAutoMasking_2(
          this,
          Invocation.getter(#autoMasking),
        ),
      ) as _i4.AutoMasking);
  @override
  _i5.ScreenshotTaker get screenshotTaker => (super.noSuchMethod(
        Invocation.getter(#screenshotTaker),
        returnValue: _FakeScreenshotTaker_3(
          this,
          Invocation.getter(#screenshotTaker),
        ),
        returnValueForMissingStub: _FakeScreenshotTaker_3(
          this,
          Invocation.getter(#screenshotTaker),
        ),
      ) as _i5.ScreenshotTaker);
  @override
  _i6.WidgetsBinding get widgetsBindingInstance => (super.noSuchMethod(
        Invocation.getter(#widgetsBindingInstance),
        returnValue: _FakeWidgetsBinding_4(
          this,
          Invocation.getter(#widgetsBindingInstance),
        ),
        returnValueForMissingStub: _FakeWidgetsBinding_4(
          this,
          Invocation.getter(#widgetsBindingInstance),
        ),
      ) as _i6.WidgetsBinding);
  @override
  _i7.SchedulerBinding get schedulerBindingInstance => (super.noSuchMethod(
        Invocation.getter(#schedulerBindingInstance),
        returnValue: _FakeSchedulerBinding_5(
          this,
          Invocation.getter(#schedulerBindingInstance),
        ),
        returnValueForMissingStub: _FakeSchedulerBinding_5(
          this,
          Invocation.getter(#schedulerBindingInstance),
        ),
      ) as _i7.SchedulerBinding);
  @override
  _i8.Timer get timer => (super.noSuchMethod(
        Invocation.getter(#timer),
        returnValue: _FakeTimer_6(
          this,
          Invocation.getter(#timer),
        ),
        returnValueForMissingStub: _FakeTimer_6(
          this,
          Invocation.getter(#timer),
        ),
      ) as _i8.Timer);
  @override
  set timer(_i8.Timer? _timer) => super.noSuchMethod(
        Invocation.setter(
          #timer,
          _timer,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get didUiChangeValue => (super.noSuchMethod(
        Invocation.getter(#didUiChangeValue),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set didUiChangeValue(bool? _didUiChangeValue) => super.noSuchMethod(
        Invocation.setter(
          #didUiChangeValue,
          _didUiChangeValue,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i9.Logger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLogger_7(
          this,
          Invocation.getter(#logger),
        ),
        returnValueForMissingStub: _FakeLogger_7(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i9.Logger);
  @override
  bool get didUiChange => (super.noSuchMethod(
        Invocation.getter(#didUiChange),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set didUiChange(bool? change) => super.noSuchMethod(
        Invocation.setter(
          #didUiChange,
          change,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isFrameTimeWindowSafe => (super.noSuchMethod(
        Invocation.getter(#isFrameTimeWindowSafe),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  Map<int, _i8.Future<dynamic>> get completerMap => (super.noSuchMethod(
        Invocation.getter(#completerMap),
        returnValue: <int, _i8.Future<dynamic>>{},
        returnValueForMissingStub: <int, _i8.Future<dynamic>>{},
      ) as Map<int, _i8.Future<dynamic>>);
  @override
  _i10.Tracking get tracking => (super.noSuchMethod(
        Invocation.getter(#tracking),
        returnValue: _FakeTracking_8(
          this,
          Invocation.getter(#tracking),
        ),
        returnValueForMissingStub: _FakeTracking_8(
          this,
          Invocation.getter(#tracking),
        ),
      ) as _i10.Tracking);
  @override
  int get screenshotPending => (super.noSuchMethod(
        Invocation.getter(#screenshotPending),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  bool get newScreenIsEnqued => (super.noSuchMethod(
        Invocation.getter(#newScreenIsEnqued),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i8.Future<void> newScreen() => (super.noSuchMethod(
        Invocation.method(
          #newScreen,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> sendPlaceholderImage() => (super.noSuchMethod(
        Invocation.method(
          #sendPlaceholderImage,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  void startPeriodicTimer() => super.noSuchMethod(
        Invocation.method(
          #startPeriodicTimer,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void stopPeriodicTimer() => super.noSuchMethod(
        Invocation.method(
          #stopPeriodicTimer,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void updateFrameRate() => super.noSuchMethod(
        Invocation.method(
          #updateFrameRate,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void clearMasks() => super.noSuchMethod(
        Invocation.method(
          #clearMasks,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<void> tryToTakeScreenshotIfUiHasChanged() => (super.noSuchMethod(
        Invocation.method(
          #tryToTakeScreenshotIfUiHasChanged,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> closeScreenVideoWithPlaceholderImageIfNecessary(
          _i14.ScreenVisitedFinished? screenVisited) =>
      (super.noSuchMethod(
        Invocation.method(
          #closeScreenVideoWithPlaceholderImageIfNecessary,
          [screenVisited],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<T> functionCompleterWrapper<T>(
    int? hashCode,
    _i8.Future<T> Function()? function,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #functionCompleterWrapper,
          [
            hashCode,
            function,
          ],
        ),
        returnValue: _FakeFuture_9<T>(
          this,
          Invocation.method(
            #functionCompleterWrapper,
            [
              hashCode,
              function,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeFuture_9<T>(
          this,
          Invocation.method(
            #functionCompleterWrapper,
            [
              hashCode,
              function,
            ],
          ),
        ),
      ) as _i8.Future<T>);
  @override
  _i8.Future<void> waitForFunctionCompleter(int? hashCode) =>
      (super.noSuchMethod(
        Invocation.method(
          #waitForFunctionCompleter,
          [hashCode],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> startScreenTasksCompleterWrapper(
          _i8.Future<void> Function()? function) =>
      (super.noSuchMethod(
        Invocation.method(
          #startScreenTasksCompleterWrapper,
          [function],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> overridePendingStartScreen(
    _i8.Future<void> Function(_i8.Completer<dynamic>)? function,
    _i8.Completer<dynamic>? cancelToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #overridePendingStartScreen,
          [
            function,
            cancelToken,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> waitForNextFrameIfScheduled() => (super.noSuchMethod(
        Invocation.method(
          #waitForNextFrameIfScheduled,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> waitForNextFrame() => (super.noSuchMethod(
        Invocation.method(
          #waitForNextFrame,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Completer<dynamic> createEndScreenCompleter() => (super.noSuchMethod(
        Invocation.method(
          #createEndScreenCompleter,
          [],
        ),
        returnValue: _FakeCompleter_10<dynamic>(
          this,
          Invocation.method(
            #createEndScreenCompleter,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeCompleter_10<dynamic>(
          this,
          Invocation.method(
            #createEndScreenCompleter,
            [],
          ),
        ),
      ) as _i8.Completer<dynamic>);
  @override
  _i8.Future<void> waitForEndScreenEnquedCompleter() => (super.noSuchMethod(
        Invocation.method(
          #waitForEndScreenEnquedCompleter,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<T> endScreenTasksCompleterWrapper<T>({
    required _i8.Future<T> Function()? taskToComplete,
    bool? isScreenshotTask = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #endScreenTasksCompleterWrapper,
          [],
          {
            #taskToComplete: taskToComplete,
            #isScreenshotTask: isScreenshotTask,
          },
        ),
        returnValue: _FakeFuture_9<T>(
          this,
          Invocation.method(
            #endScreenTasksCompleterWrapper,
            [],
            {
              #taskToComplete: taskToComplete,
              #isScreenshotTask: isScreenshotTask,
            },
          ),
        ),
        returnValueForMissingStub: _FakeFuture_9<T>(
          this,
          Invocation.method(
            #endScreenTasksCompleterWrapper,
            [],
            {
              #taskToComplete: taskToComplete,
              #isScreenshotTask: isScreenshotTask,
            },
          ),
        ),
      ) as _i8.Future<T>);
  @override
  _i8.Future<void> waitForEndScreenTasksCompleter() => (super.noSuchMethod(
        Invocation.method(
          #waitForEndScreenTasksCompleter,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  void debugCheckIfDefunct(_i6.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #debugCheckIfDefunct,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool checkIfMounted(_i6.BuildContext? context) => (super.noSuchMethod(
        Invocation.method(
          #checkIfMounted,
          [context],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [ScreenshotTaker].
///
/// See the documentation for Mockito's code generation for more information.
class MockScreenshotTaker extends _i1.Mock implements _i5.ScreenshotTaker {
  @override
  _i4.AutoMasking get autoMasking => (super.noSuchMethod(
        Invocation.getter(#autoMasking),
        returnValue: _FakeAutoMasking_2(
          this,
          Invocation.getter(#autoMasking),
        ),
        returnValueForMissingStub: _FakeAutoMasking_2(
          this,
          Invocation.getter(#autoMasking),
        ),
      ) as _i4.AutoMasking);
  @override
  _i6.WidgetsBinding get widgetsBindingInstance => (super.noSuchMethod(
        Invocation.getter(#widgetsBindingInstance),
        returnValue: _FakeWidgetsBinding_4(
          this,
          Invocation.getter(#widgetsBindingInstance),
        ),
        returnValueForMissingStub: _FakeWidgetsBinding_4(
          this,
          Invocation.getter(#widgetsBindingInstance),
        ),
      ) as _i6.WidgetsBinding);
  @override
  _i10.Tracking get tracking => (super.noSuchMethod(
        Invocation.getter(#tracking),
        returnValue: _FakeTracking_8(
          this,
          Invocation.getter(#tracking),
        ),
        returnValueForMissingStub: _FakeTracking_8(
          this,
          Invocation.getter(#tracking),
        ),
      ) as _i10.Tracking);
  @override
  int get screenshotPending => (super.noSuchMethod(
        Invocation.getter(#screenshotPending),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  bool get newScreenIsEnqued => (super.noSuchMethod(
        Invocation.getter(#newScreenIsEnqued),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i8.Future<_i22.ByteData?> captureImage({
    required _i14.ScreenVisited? screenVisited,
    required _i12.VoidCallback? uiChangedReset,
    required _i12.VoidCallback? forceScreeshotNextFrame,
    required dynamic Function(_i12.Size)? screenSizeCallback,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #captureImage,
          [],
          {
            #screenVisited: screenVisited,
            #uiChangedReset: uiChangedReset,
            #forceScreeshotNextFrame: forceScreeshotNextFrame,
            #screenSizeCallback: screenSizeCallback,
          },
        ),
        returnValue: _i8.Future<_i22.ByteData?>.value(),
        returnValueForMissingStub: _i8.Future<_i22.ByteData?>.value(),
      ) as _i8.Future<_i22.ByteData?>);
  @override
  _i8.Future<void> startScreenTasksCompleterWrapper(
          _i8.Future<void> Function()? function) =>
      (super.noSuchMethod(
        Invocation.method(
          #startScreenTasksCompleterWrapper,
          [function],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> overridePendingStartScreen(
    _i8.Future<void> Function(_i8.Completer<dynamic>)? function,
    _i8.Completer<dynamic>? cancelToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #overridePendingStartScreen,
          [
            function,
            cancelToken,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> waitForNextFrameIfScheduled() => (super.noSuchMethod(
        Invocation.method(
          #waitForNextFrameIfScheduled,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> waitForNextFrame() => (super.noSuchMethod(
        Invocation.method(
          #waitForNextFrame,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Completer<dynamic> createEndScreenCompleter() => (super.noSuchMethod(
        Invocation.method(
          #createEndScreenCompleter,
          [],
        ),
        returnValue: _FakeCompleter_10<dynamic>(
          this,
          Invocation.method(
            #createEndScreenCompleter,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeCompleter_10<dynamic>(
          this,
          Invocation.method(
            #createEndScreenCompleter,
            [],
          ),
        ),
      ) as _i8.Completer<dynamic>);
  @override
  _i8.Future<void> waitForEndScreenEnquedCompleter() => (super.noSuchMethod(
        Invocation.method(
          #waitForEndScreenEnquedCompleter,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<T> endScreenTasksCompleterWrapper<T>({
    required _i8.Future<T> Function()? taskToComplete,
    bool? isScreenshotTask = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #endScreenTasksCompleterWrapper,
          [],
          {
            #taskToComplete: taskToComplete,
            #isScreenshotTask: isScreenshotTask,
          },
        ),
        returnValue: _FakeFuture_9<T>(
          this,
          Invocation.method(
            #endScreenTasksCompleterWrapper,
            [],
            {
              #taskToComplete: taskToComplete,
              #isScreenshotTask: isScreenshotTask,
            },
          ),
        ),
        returnValueForMissingStub: _FakeFuture_9<T>(
          this,
          Invocation.method(
            #endScreenTasksCompleterWrapper,
            [],
            {
              #taskToComplete: taskToComplete,
              #isScreenshotTask: isScreenshotTask,
            },
          ),
        ),
      ) as _i8.Future<T>);
  @override
  _i8.Future<void> waitForEndScreenTasksCompleter() => (super.noSuchMethod(
        Invocation.method(
          #waitForEndScreenTasksCompleter,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  void debugCheckIfDefunct(_i6.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #debugCheckIfDefunct,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool checkIfMounted(_i6.BuildContext? context) => (super.noSuchMethod(
        Invocation.method(
          #checkIfMounted,
          [context],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [GoalsAndDimensions].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoalsAndDimensions extends _i1.Mock
    implements _i23.GoalsAndDimensions {
  @override
  _i9.Logger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLogger_7(
          this,
          Invocation.getter(#logger),
        ),
        returnValueForMissingStub: _FakeLogger_7(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i9.Logger);
  @override
  _i10.Tracking get tracking => (super.noSuchMethod(
        Invocation.getter(#tracking),
        returnValue: _FakeTracking_8(
          this,
          Invocation.getter(#tracking),
        ),
        returnValueForMissingStub: _FakeTracking_8(
          this,
          Invocation.getter(#tracking),
        ),
      ) as _i10.Tracking);
  @override
  int get screenshotPending => (super.noSuchMethod(
        Invocation.getter(#screenshotPending),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  bool get newScreenIsEnqued => (super.noSuchMethod(
        Invocation.getter(#newScreenIsEnqued),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i8.Future<void> setDimensionWithString(
    String? dimensionName,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDimensionWithString,
          [
            dimensionName,
            value,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> setDimensionWithNumber(
    String? dimensionName,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDimensionWithNumber,
          [
            dimensionName,
            value,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> setDimensionWithBool(
    String? dimensionName, {
    required bool? value,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDimensionWithBool,
          [dimensionName],
          {#value: value},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> sendGoal(
    String? goalName, [
    double? value,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendGoal,
          [
            goalName,
            value,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> startScreenTasksCompleterWrapper(
          _i8.Future<void> Function()? function) =>
      (super.noSuchMethod(
        Invocation.method(
          #startScreenTasksCompleterWrapper,
          [function],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> overridePendingStartScreen(
    _i8.Future<void> Function(_i8.Completer<dynamic>)? function,
    _i8.Completer<dynamic>? cancelToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #overridePendingStartScreen,
          [
            function,
            cancelToken,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> waitForNextFrameIfScheduled() => (super.noSuchMethod(
        Invocation.method(
          #waitForNextFrameIfScheduled,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> waitForNextFrame() => (super.noSuchMethod(
        Invocation.method(
          #waitForNextFrame,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Completer<dynamic> createEndScreenCompleter() => (super.noSuchMethod(
        Invocation.method(
          #createEndScreenCompleter,
          [],
        ),
        returnValue: _FakeCompleter_10<dynamic>(
          this,
          Invocation.method(
            #createEndScreenCompleter,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeCompleter_10<dynamic>(
          this,
          Invocation.method(
            #createEndScreenCompleter,
            [],
          ),
        ),
      ) as _i8.Completer<dynamic>);
  @override
  _i8.Future<void> waitForEndScreenEnquedCompleter() => (super.noSuchMethod(
        Invocation.method(
          #waitForEndScreenEnquedCompleter,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<T> endScreenTasksCompleterWrapper<T>({
    required _i8.Future<T> Function()? taskToComplete,
    bool? isScreenshotTask = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #endScreenTasksCompleterWrapper,
          [],
          {
            #taskToComplete: taskToComplete,
            #isScreenshotTask: isScreenshotTask,
          },
        ),
        returnValue: _FakeFuture_9<T>(
          this,
          Invocation.method(
            #endScreenTasksCompleterWrapper,
            [],
            {
              #taskToComplete: taskToComplete,
              #isScreenshotTask: isScreenshotTask,
            },
          ),
        ),
        returnValueForMissingStub: _FakeFuture_9<T>(
          this,
          Invocation.method(
            #endScreenTasksCompleterWrapper,
            [],
            {
              #taskToComplete: taskToComplete,
              #isScreenshotTask: isScreenshotTask,
            },
          ),
        ),
      ) as _i8.Future<T>);
  @override
  _i8.Future<void> waitForEndScreenTasksCompleter() => (super.noSuchMethod(
        Invocation.method(
          #waitForEndScreenTasksCompleter,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  void debugCheckIfDefunct(_i6.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #debugCheckIfDefunct,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool checkIfMounted(_i6.BuildContext? context) => (super.noSuchMethod(
        Invocation.method(
          #checkIfMounted,
          [context],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [AutoMasking].
///
/// See the documentation for Mockito's code generation for more information.
class MockAutoMasking extends _i1.Mock implements _i4.AutoMasking {
  @override
  Set<_i6.RenderObject> get renderObjectsToMask => (super.noSuchMethod(
        Invocation.getter(#renderObjectsToMask),
        returnValue: <_i6.RenderObject>{},
        returnValueForMissingStub: <_i6.RenderObject>{},
      ) as Set<_i6.RenderObject>);
  @override
  _i9.Logger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLogger_7(
          this,
          Invocation.getter(#logger),
        ),
        returnValueForMissingStub: _FakeLogger_7(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i9.Logger);
  @override
  Set<_i24.AutoMaskingType> get autoMaskingTypeSet => (super.noSuchMethod(
        Invocation.getter(#autoMaskingTypeSet),
        returnValue: <_i24.AutoMaskingType>{},
        returnValueForMissingStub: <_i24.AutoMaskingType>{},
      ) as Set<_i24.AutoMaskingType>);
  @override
  set autoMaskingTypeSet(Set<_i24.AutoMaskingType>? value) =>
      super.noSuchMethod(
        Invocation.setter(
          #autoMaskingTypeSet,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeUnmaskedTypesFromAutoMaskingTypeSet(
          Set<_i24.AutoMaskingType>? set) =>
      super.noSuchMethod(
        Invocation.method(
          #removeUnmaskedTypesFromAutoMaskingTypeSet,
          [set],
        ),
        returnValueForMissingStub: null,
      );
  @override
  Set<_i6.RenderObject> getMaskedRenderObjectsWithinContexts({
    required _i6.BuildContext? startContext,
    required List<_i6.BuildContext>? stopContexts,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMaskedRenderObjectsWithinContexts,
          [],
          {
            #startContext: startContext,
            #stopContexts: stopContexts,
          },
        ),
        returnValue: <_i6.RenderObject>{},
        returnValueForMissingStub: <_i6.RenderObject>{},
      ) as Set<_i6.RenderObject>);
  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  Set<_i6.RenderObject> getRenderObjectsByAutoMaskingType({
    required _i6.BuildContext? startContext,
    required Set<_i24.AutoMaskingType>? autoMaskingTypeSet,
    required List<_i6.BuildContext>? stopContexts,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRenderObjectsByAutoMaskingType,
          [],
          {
            #startContext: startContext,
            #autoMaskingTypeSet: autoMaskingTypeSet,
            #stopContexts: stopContexts,
          },
        ),
        returnValue: <_i6.RenderObject>{},
        returnValueForMissingStub: <_i6.RenderObject>{},
      ) as Set<_i6.RenderObject>);
}

/// A class which mocks [HttpErrors].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpErrors extends _i1.Mock implements _i25.HttpErrors {
  @override
  _i9.Logger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLogger_7(
          this,
          Invocation.getter(#logger),
        ),
        returnValueForMissingStub: _FakeLogger_7(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i9.Logger);
  @override
  _i10.Tracking get tracking => (super.noSuchMethod(
        Invocation.getter(#tracking),
        returnValue: _FakeTracking_8(
          this,
          Invocation.getter(#tracking),
        ),
        returnValueForMissingStub: _FakeTracking_8(
          this,
          Invocation.getter(#tracking),
        ),
      ) as _i10.Tracking);
  @override
  int get screenshotPending => (super.noSuchMethod(
        Invocation.getter(#screenshotPending),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  bool get newScreenIsEnqued => (super.noSuchMethod(
        Invocation.getter(#newScreenIsEnqued),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i8.Future<void> sendStatusCode(int? statusCode) => (super.noSuchMethod(
        Invocation.method(
          #sendStatusCode,
          [statusCode],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> startScreenTasksCompleterWrapper(
          _i8.Future<void> Function()? function) =>
      (super.noSuchMethod(
        Invocation.method(
          #startScreenTasksCompleterWrapper,
          [function],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> overridePendingStartScreen(
    _i8.Future<void> Function(_i8.Completer<dynamic>)? function,
    _i8.Completer<dynamic>? cancelToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #overridePendingStartScreen,
          [
            function,
            cancelToken,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> waitForNextFrameIfScheduled() => (super.noSuchMethod(
        Invocation.method(
          #waitForNextFrameIfScheduled,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> waitForNextFrame() => (super.noSuchMethod(
        Invocation.method(
          #waitForNextFrame,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Completer<dynamic> createEndScreenCompleter() => (super.noSuchMethod(
        Invocation.method(
          #createEndScreenCompleter,
          [],
        ),
        returnValue: _FakeCompleter_10<dynamic>(
          this,
          Invocation.method(
            #createEndScreenCompleter,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeCompleter_10<dynamic>(
          this,
          Invocation.method(
            #createEndScreenCompleter,
            [],
          ),
        ),
      ) as _i8.Completer<dynamic>);
  @override
  _i8.Future<void> waitForEndScreenEnquedCompleter() => (super.noSuchMethod(
        Invocation.method(
          #waitForEndScreenEnquedCompleter,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<T> endScreenTasksCompleterWrapper<T>({
    required _i8.Future<T> Function()? taskToComplete,
    bool? isScreenshotTask = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #endScreenTasksCompleterWrapper,
          [],
          {
            #taskToComplete: taskToComplete,
            #isScreenshotTask: isScreenshotTask,
          },
        ),
        returnValue: _FakeFuture_9<T>(
          this,
          Invocation.method(
            #endScreenTasksCompleterWrapper,
            [],
            {
              #taskToComplete: taskToComplete,
              #isScreenshotTask: isScreenshotTask,
            },
          ),
        ),
        returnValueForMissingStub: _FakeFuture_9<T>(
          this,
          Invocation.method(
            #endScreenTasksCompleterWrapper,
            [],
            {
              #taskToComplete: taskToComplete,
              #isScreenshotTask: isScreenshotTask,
            },
          ),
        ),
      ) as _i8.Future<T>);
  @override
  _i8.Future<void> waitForEndScreenTasksCompleter() => (super.noSuchMethod(
        Invocation.method(
          #waitForEndScreenTasksCompleter,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  void debugCheckIfDefunct(_i6.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #debugCheckIfDefunct,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool checkIfMounted(_i6.BuildContext? context) => (super.noSuchMethod(
        Invocation.method(
          #checkIfMounted,
          [context],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [LoggerSDK].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggerSDK extends _i1.Mock implements _i26.LoggerSDK {
  @override
  bool Function() get isSdkRunning => (super.noSuchMethod(
        Invocation.getter(#isSdkRunning),
        returnValue: () => false,
        returnValueForMissingStub: () => false,
      ) as bool Function());
  @override
  bool get enabled => (super.noSuchMethod(
        Invocation.getter(#enabled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set enabled(bool? _enabled) => super.noSuchMethod(
        Invocation.setter(
          #enabled,
          _enabled,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get tracking => (super.noSuchMethod(
        Invocation.getter(#tracking),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set tracking(bool? _tracking) => super.noSuchMethod(
        Invocation.setter(
          #tracking,
          _tracking,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get sessionReplay => (super.noSuchMethod(
        Invocation.getter(#sessionReplay),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set sessionReplay(bool? _sessionReplay) => super.noSuchMethod(
        Invocation.setter(
          #sessionReplay,
          _sessionReplay,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get frameTracking => (super.noSuchMethod(
        Invocation.getter(#frameTracking),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set frameTracking(bool? _frameTracking) => super.noSuchMethod(
        Invocation.setter(
          #frameTracking,
          _frameTracking,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get routeObserver => (super.noSuchMethod(
        Invocation.getter(#routeObserver),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set routeObserver(bool? _routeObserver) => super.noSuchMethod(
        Invocation.setter(
          #routeObserver,
          _routeObserver,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get autoMasking => (super.noSuchMethod(
        Invocation.getter(#autoMasking),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set autoMasking(bool? _autoMasking) => super.noSuchMethod(
        Invocation.setter(
          #autoMasking,
          _autoMasking,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get screenWidget => (super.noSuchMethod(
        Invocation.getter(#screenWidget),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set screenWidget(bool? _screenWidget) => super.noSuchMethod(
        Invocation.setter(
          #screenWidget,
          _screenWidget,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get maskWidget => (super.noSuchMethod(
        Invocation.getter(#maskWidget),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set maskWidget(bool? _maskWidget) => super.noSuchMethod(
        Invocation.setter(
          #maskWidget,
          _maskWidget,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get manualAnalytics => (super.noSuchMethod(
        Invocation.getter(#manualAnalytics),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set manualAnalytics(bool? _manualAnalytics) => super.noSuchMethod(
        Invocation.setter(
          #manualAnalytics,
          _manualAnalytics,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i9.Logger get screenWidgetLogger => (super.noSuchMethod(
        Invocation.getter(#screenWidgetLogger),
        returnValue: _FakeLogger_7(
          this,
          Invocation.getter(#screenWidgetLogger),
        ),
        returnValueForMissingStub: _FakeLogger_7(
          this,
          Invocation.getter(#screenWidgetLogger),
        ),
      ) as _i9.Logger);
  @override
  _i9.Logger get maskWidgetLogger => (super.noSuchMethod(
        Invocation.getter(#maskWidgetLogger),
        returnValue: _FakeLogger_7(
          this,
          Invocation.getter(#maskWidgetLogger),
        ),
        returnValueForMissingStub: _FakeLogger_7(
          this,
          Invocation.getter(#maskWidgetLogger),
        ),
      ) as _i9.Logger);
  @override
  _i9.Logger get trackingLogger => (super.noSuchMethod(
        Invocation.getter(#trackingLogger),
        returnValue: _FakeLogger_7(
          this,
          Invocation.getter(#trackingLogger),
        ),
        returnValueForMissingStub: _FakeLogger_7(
          this,
          Invocation.getter(#trackingLogger),
        ),
      ) as _i9.Logger);
  @override
  _i9.Logger get sessionReplayLogger => (super.noSuchMethod(
        Invocation.getter(#sessionReplayLogger),
        returnValue: _FakeLogger_7(
          this,
          Invocation.getter(#sessionReplayLogger),
        ),
        returnValueForMissingStub: _FakeLogger_7(
          this,
          Invocation.getter(#sessionReplayLogger),
        ),
      ) as _i9.Logger);
  @override
  _i9.Logger get frameTrackingLogger => (super.noSuchMethod(
        Invocation.getter(#frameTrackingLogger),
        returnValue: _FakeLogger_7(
          this,
          Invocation.getter(#frameTrackingLogger),
        ),
        returnValueForMissingStub: _FakeLogger_7(
          this,
          Invocation.getter(#frameTrackingLogger),
        ),
      ) as _i9.Logger);
  @override
  _i9.Logger get routeObserverLogger => (super.noSuchMethod(
        Invocation.getter(#routeObserverLogger),
        returnValue: _FakeLogger_7(
          this,
          Invocation.getter(#routeObserverLogger),
        ),
        returnValueForMissingStub: _FakeLogger_7(
          this,
          Invocation.getter(#routeObserverLogger),
        ),
      ) as _i9.Logger);
  @override
  _i9.Logger get autoMaskingLogger => (super.noSuchMethod(
        Invocation.getter(#autoMaskingLogger),
        returnValue: _FakeLogger_7(
          this,
          Invocation.getter(#autoMaskingLogger),
        ),
        returnValueForMissingStub: _FakeLogger_7(
          this,
          Invocation.getter(#autoMaskingLogger),
        ),
      ) as _i9.Logger);
  @override
  _i9.Logger get manualAnalyticsLogger => (super.noSuchMethod(
        Invocation.getter(#manualAnalyticsLogger),
        returnValue: _FakeLogger_7(
          this,
          Invocation.getter(#manualAnalyticsLogger),
        ),
        returnValueForMissingStub: _FakeLogger_7(
          this,
          Invocation.getter(#manualAnalyticsLogger),
        ),
      ) as _i9.Logger);
  @override
  void all() => super.noSuchMethod(
        Invocation.method(
          #all,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void selected({
    bool? enabled = false,
    bool? tracking = false,
    bool? sessionReplay = false,
    bool? frameTracking = false,
    bool? routeObserver = false,
    bool? autoMasking = false,
    bool? screenWidget = false,
    bool? maskWidget = false,
    bool? manualAnalytics = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #selected,
          [],
          {
            #enabled: enabled,
            #tracking: tracking,
            #sessionReplay: sessionReplay,
            #frameTracking: frameTracking,
            #routeObserver: routeObserver,
            #autoMasking: autoMasking,
            #screenWidget: screenWidget,
            #maskWidget: maskWidget,
            #manualAnalytics: manualAnalytics,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void cleanLoggers() => super.noSuchMethod(
        Invocation.method(
          #cleanLoggers,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FrameTracking].
///
/// See the documentation for Mockito's code generation for more information.
class MockFrameTracking extends _i1.Mock implements _i27.FrameTracking {
  @override
  void Function(void Function(Duration)) get postFrameCallback =>
      (super.noSuchMethod(
        Invocation.getter(#postFrameCallback),
        returnValue: (void Function(Duration) __p0) {},
        returnValueForMissingStub: (void Function(Duration) __p0) {},
      ) as void Function(void Function(Duration)));
  @override
  _i8.StreamController<Duration> get newFrameStreamController =>
      (super.noSuchMethod(
        Invocation.getter(#newFrameStreamController),
        returnValue: _FakeStreamController_11<Duration>(
          this,
          Invocation.getter(#newFrameStreamController),
        ),
        returnValueForMissingStub: _FakeStreamController_11<Duration>(
          this,
          Invocation.getter(#newFrameStreamController),
        ),
      ) as _i8.StreamController<Duration>);
  @override
  bool get alreadyWaiting => (super.noSuchMethod(
        Invocation.getter(#alreadyWaiting),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set alreadyWaiting(bool? _alreadyWaiting) => super.noSuchMethod(
        Invocation.setter(
          #alreadyWaiting,
          _alreadyWaiting,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i9.Logger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLogger_7(
          this,
          Invocation.getter(#logger),
        ),
        returnValueForMissingStub: _FakeLogger_7(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i9.Logger);
  @override
  void waitForNextFrame() => super.noSuchMethod(
        Invocation.method(
          #waitForNextFrame,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PlaceholderImageConfig].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlaceholderImageConfig extends _i1.Mock
    implements _i28.PlaceholderImageConfig {
  @override
  _i11.HashMap<_i28.PlaceholderImageId, _i22.ByteData>
      get placeholderImageByteDataMap => (super.noSuchMethod(
            Invocation.getter(#placeholderImageByteDataMap),
            returnValue:
                _FakeHashMap_12<_i28.PlaceholderImageId, _i22.ByteData>(
              this,
              Invocation.getter(#placeholderImageByteDataMap),
            ),
            returnValueForMissingStub:
                _FakeHashMap_12<_i28.PlaceholderImageId, _i22.ByteData>(
              this,
              Invocation.getter(#placeholderImageByteDataMap),
            ),
          ) as _i11.HashMap<_i28.PlaceholderImageId, _i22.ByteData>);
  @override
  set placeHolderIcon(_i22.ByteData? _placeHolderIcon) => super.noSuchMethod(
        Invocation.setter(
          #placeHolderIcon,
          _placeHolderIcon,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i12.Size get lastSize => (super.noSuchMethod(
        Invocation.getter(#lastSize),
        returnValue: _FakeSize_13(
          this,
          Invocation.getter(#lastSize),
        ),
        returnValueForMissingStub: _FakeSize_13(
          this,
          Invocation.getter(#lastSize),
        ),
      ) as _i12.Size);
  @override
  set lastSize(_i12.Size? _lastSize) => super.noSuchMethod(
        Invocation.setter(
          #lastSize,
          _lastSize,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.FutureOr<_i22.ByteData> getPlaceholderImage(
          _i28.PlaceholderType? placeholderType) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPlaceholderImage,
          [placeholderType],
        ),
        returnValue: _i8.Future<_i22.ByteData>.value(_i22.ByteData(0)),
        returnValueForMissingStub:
            _i8.Future<_i22.ByteData>.value(_i22.ByteData(0)),
      ) as _i8.FutureOr<_i22.ByteData>);
}

/// A class which mocks [Tracking].
///
/// See the documentation for Mockito's code generation for more information.
class MockTracking extends _i1.Mock implements _i10.Tracking {
  @override
  _i13.MedalliaDxaConfig get medalliaDxaConfig => (super.noSuchMethod(
        Invocation.getter(#medalliaDxaConfig),
        returnValue: _FakeMedalliaDxaConfig_14(
          this,
          Invocation.getter(#medalliaDxaConfig),
        ),
        returnValueForMissingStub: _FakeMedalliaDxaConfig_14(
          this,
          Invocation.getter(#medalliaDxaConfig),
        ),
      ) as _i13.MedalliaDxaConfig);
  @override
  _i8.StreamController<_i14.ScreenVisited>
      get newScreenSentToNativeStreamController => (super.noSuchMethod(
            Invocation.getter(#newScreenSentToNativeStreamController),
            returnValue: _FakeStreamController_11<_i14.ScreenVisited>(
              this,
              Invocation.getter(#newScreenSentToNativeStreamController),
            ),
            returnValueForMissingStub:
                _FakeStreamController_11<_i14.ScreenVisited>(
              this,
              Invocation.getter(#newScreenSentToNativeStreamController),
            ),
          ) as _i8.StreamController<_i14.ScreenVisited>);
  @override
  List<_i29.CompleterOfPotentialHeavyTask>
      get tasksBeforeEndScreenCompleterList => (super.noSuchMethod(
            Invocation.getter(#tasksBeforeEndScreenCompleterList),
            returnValue: <_i29.CompleterOfPotentialHeavyTask>[],
            returnValueForMissingStub: <_i29.CompleterOfPotentialHeavyTask>[],
          ) as List<_i29.CompleterOfPotentialHeavyTask>);
  @override
  List<_i8.Completer<dynamic>> get startScreenEnquedCompleterList =>
      (super.noSuchMethod(
        Invocation.getter(#startScreenEnquedCompleterList),
        returnValue: <_i8.Completer<dynamic>>[],
        returnValueForMissingStub: <_i8.Completer<dynamic>>[],
      ) as List<_i8.Completer<dynamic>>);
  @override
  List<_i8.Completer<dynamic>> get endScreenEnquedCompleterList =>
      (super.noSuchMethod(
        Invocation.getter(#endScreenEnquedCompleterList),
        returnValue: <_i8.Completer<dynamic>>[],
        returnValueForMissingStub: <_i8.Completer<dynamic>>[],
      ) as List<_i8.Completer<dynamic>>);
  @override
  set screenVisitedWhenAppWentToBackground(
          _i14.ScreenVisited? _screenVisitedWhenAppWentToBackground) =>
      super.noSuchMethod(
        Invocation.setter(
          #screenVisitedWhenAppWentToBackground,
          _screenVisitedWhenAppWentToBackground,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isRouteAnimating => (super.noSuchMethod(
        Invocation.getter(#isRouteAnimating),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set isRouteAnimating(bool? _isRouteAnimating) => super.noSuchMethod(
        Invocation.setter(
          #isRouteAnimating,
          _isRouteAnimating,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i9.Logger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLogger_7(
          this,
          Invocation.getter(#logger),
        ),
        returnValueForMissingStub: _FakeLogger_7(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i9.Logger);
  @override
  List<_i14.ScreenVisited> get visitedScreensList => (super.noSuchMethod(
        Invocation.getter(#visitedScreensList),
        returnValue: <_i14.ScreenVisited>[],
        returnValueForMissingStub: <_i14.ScreenVisited>[],
      ) as List<_i14.ScreenVisited>);
  @override
  bool get areThereOngoingAnimations => (super.noSuchMethod(
        Invocation.getter(#areThereOngoingAnimations),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i12.Size get physicalSize => (super.noSuchMethod(
        Invocation.getter(#physicalSize),
        returnValue: _FakeSize_13(
          this,
          Invocation.getter(#physicalSize),
        ),
        returnValueForMissingStub: _FakeSize_13(
          this,
          Invocation.getter(#physicalSize),
        ),
      ) as _i12.Size);
  @override
  set physicalSize(_i12.Size? newPhysicalSize) => super.noSuchMethod(
        Invocation.setter(
          #physicalSize,
          newPhysicalSize,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i10.Tracking get tracking => (super.noSuchMethod(
        Invocation.getter(#tracking),
        returnValue: _FakeTracking_8(
          this,
          Invocation.getter(#tracking),
        ),
        returnValueForMissingStub: _FakeTracking_8(
          this,
          Invocation.getter(#tracking),
        ),
      ) as _i10.Tracking);
  @override
  int get screenshotPending => (super.noSuchMethod(
        Invocation.getter(#screenshotPending),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  bool get newScreenIsEnqued => (super.noSuchMethod(
        Invocation.getter(#newScreenIsEnqued),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void setTrackingDisabledScreenList(List<String>? trackingDisabledScreens) =>
      super.noSuchMethod(
        Invocation.method(
          #setTrackingDisabledScreenList,
          [trackingDisabledScreens],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setRecordingDisabledScreenList(List<String>? recordingDisabledScreens) =>
      super.noSuchMethod(
        Invocation.method(
          #setRecordingDisabledScreenList,
          [recordingDisabledScreens],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void currentTrackedScreenHasANonPaintedRoute() => super.noSuchMethod(
        Invocation.method(
          #currentTrackedScreenHasANonPaintedRoute,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void updateTracking() => super.noSuchMethod(
        Invocation.method(
          #updateTracking,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didChangeAppLifecycleState(_i12.AppLifecycleState? state) =>
      super.noSuchMethod(
        Invocation.method(
          #didChangeAppLifecycleState,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didChangeMetrics() => super.noSuchMethod(
        Invocation.method(
          #didChangeMetrics,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i14.ScreenVisited createScreenVisited({
    required String? id,
    required String? name,
    required List<_i30.DxaRoute>? dxaRoutePath,
    required List<_i30.DxaRoute>? allDetectedDxaRoutes,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createScreenVisited,
          [],
          {
            #id: id,
            #name: name,
            #dxaRoutePath: dxaRoutePath,
            #allDetectedDxaRoutes: allDetectedDxaRoutes,
          },
        ),
        returnValue: _FakeScreenVisited_15(
          this,
          Invocation.method(
            #createScreenVisited,
            [],
            {
              #id: id,
              #name: name,
              #dxaRoutePath: dxaRoutePath,
              #allDetectedDxaRoutes: allDetectedDxaRoutes,
            },
          ),
        ),
        returnValueForMissingStub: _FakeScreenVisited_15(
          this,
          Invocation.method(
            #createScreenVisited,
            [],
            {
              #id: id,
              #name: name,
              #dxaRoutePath: dxaRoutePath,
              #allDetectedDxaRoutes: allDetectedDxaRoutes,
            },
          ),
        ),
      ) as _i14.ScreenVisited);
  @override
  _i8.Future<void> startScreen(
    List<_i14.ScreenVisited>? screenVisitedCandidates, {
    bool? isBackground = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startScreen,
          [screenVisitedCandidates],
          {#isBackground: isBackground},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> startScreenQueued(
    List<_i14.ScreenVisited>? screenVisitedCandidates,
    _i8.Completer<dynamic>? cancelToken, {
    bool? isBackground = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startScreenQueued,
          [
            screenVisitedCandidates,
            cancelToken,
          ],
          {#isBackground: isBackground},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> endScreen(
    String? screenId, {
    bool? isBackground = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #endScreen,
          [screenId],
          {#isBackground: isBackground},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> closeCurrentScreen() => (super.noSuchMethod(
        Invocation.method(
          #closeCurrentScreen,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> closeThisScreenAndThenReopen() => (super.noSuchMethod(
        Invocation.method(
          #closeThisScreenAndThenReopen,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> startScreenTasksCompleterWrapper(
          _i8.Future<void> Function()? function) =>
      (super.noSuchMethod(
        Invocation.method(
          #startScreenTasksCompleterWrapper,
          [function],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> overridePendingStartScreen(
    _i8.Future<void> Function(_i8.Completer<dynamic>)? function,
    _i8.Completer<dynamic>? cancelToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #overridePendingStartScreen,
          [
            function,
            cancelToken,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> waitForNextFrameIfScheduled() => (super.noSuchMethod(
        Invocation.method(
          #waitForNextFrameIfScheduled,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> waitForNextFrame() => (super.noSuchMethod(
        Invocation.method(
          #waitForNextFrame,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Completer<dynamic> createEndScreenCompleter() => (super.noSuchMethod(
        Invocation.method(
          #createEndScreenCompleter,
          [],
        ),
        returnValue: _FakeCompleter_10<dynamic>(
          this,
          Invocation.method(
            #createEndScreenCompleter,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeCompleter_10<dynamic>(
          this,
          Invocation.method(
            #createEndScreenCompleter,
            [],
          ),
        ),
      ) as _i8.Completer<dynamic>);
  @override
  _i8.Future<void> waitForEndScreenEnquedCompleter() => (super.noSuchMethod(
        Invocation.method(
          #waitForEndScreenEnquedCompleter,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<T> endScreenTasksCompleterWrapper<T>({
    required _i8.Future<T> Function()? taskToComplete,
    bool? isScreenshotTask = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #endScreenTasksCompleterWrapper,
          [],
          {
            #taskToComplete: taskToComplete,
            #isScreenshotTask: isScreenshotTask,
          },
        ),
        returnValue: _FakeFuture_9<T>(
          this,
          Invocation.method(
            #endScreenTasksCompleterWrapper,
            [],
            {
              #taskToComplete: taskToComplete,
              #isScreenshotTask: isScreenshotTask,
            },
          ),
        ),
        returnValueForMissingStub: _FakeFuture_9<T>(
          this,
          Invocation.method(
            #endScreenTasksCompleterWrapper,
            [],
            {
              #taskToComplete: taskToComplete,
              #isScreenshotTask: isScreenshotTask,
            },
          ),
        ),
      ) as _i8.Future<T>);
  @override
  _i8.Future<void> waitForEndScreenTasksCompleter() => (super.noSuchMethod(
        Invocation.method(
          #waitForEndScreenTasksCompleter,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  void debugCheckIfDefunct(_i6.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #debugCheckIfDefunct,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool checkIfMounted(_i6.BuildContext? context) => (super.noSuchMethod(
        Invocation.method(
          #checkIfMounted,
          [context],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i8.Future<bool> didPopRoute() => (super.noSuchMethod(
        Invocation.method(
          #didPopRoute,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
  @override
  _i8.Future<bool> didPushRoute(String? route) => (super.noSuchMethod(
        Invocation.method(
          #didPushRoute,
          [route],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
  @override
  _i8.Future<bool> didPushRouteInformation(
          _i6.RouteInformation? routeInformation) =>
      (super.noSuchMethod(
        Invocation.method(
          #didPushRouteInformation,
          [routeInformation],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
  @override
  void didChangeTextScaleFactor() => super.noSuchMethod(
        Invocation.method(
          #didChangeTextScaleFactor,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didChangePlatformBrightness() => super.noSuchMethod(
        Invocation.method(
          #didChangePlatformBrightness,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didChangeLocales(List<_i12.Locale>? locales) => super.noSuchMethod(
        Invocation.method(
          #didChangeLocales,
          [locales],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didHaveMemoryPressure() => super.noSuchMethod(
        Invocation.method(
          #didHaveMemoryPressure,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didChangeAccessibilityFeatures() => super.noSuchMethod(
        Invocation.method(
          #didChangeAccessibilityFeatures,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PerformanceMetrics].
///
/// See the documentation for Mockito's code generation for more information.
class MockPerformanceMetrics extends _i1.Mock
    implements _i15.PerformanceMetrics {
  @override
  bool get isDeviceStressed => (super.noSuchMethod(
        Invocation.getter(#isDeviceStressed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i28.PlaceholderTypeEnum get getPlaceholderType => (super.noSuchMethod(
        Invocation.getter(#getPlaceholderType),
        returnValue: _i28.PlaceholderTypeEnum.replayDisabled,
        returnValueForMissingStub: _i28.PlaceholderTypeEnum.replayDisabled,
      ) as _i28.PlaceholderTypeEnum);
  @override
  void updateFromJson(Map<String, dynamic>? jsonData) => super.noSuchMethod(
        Invocation.method(
          #updateFromJson,
          [jsonData],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i15.PerformanceMetricsStresstedType translateDeviceStressedStringToEnum(
          String? isStressedNative) =>
      (super.noSuchMethod(
        Invocation.method(
          #translateDeviceStressedStringToEnum,
          [isStressedNative],
        ),
        returnValue: _i15.PerformanceMetricsStresstedType.none,
        returnValueForMissingStub: _i15.PerformanceMetricsStresstedType.none,
      ) as _i15.PerformanceMetricsStresstedType);
}

/// A class which mocks [LiveConfiguration].
///
/// See the documentation for Mockito's code generation for more information.
class MockLiveConfiguration extends _i1.Mock implements _i16.LiveConfiguration {
  @override
  bool get isCurrentSdkVersionBlocked => (super.noSuchMethod(
        Invocation.getter(#isCurrentSdkVersionBlocked),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set isCurrentSdkVersionBlocked(bool? _isCurrentSdkVersionBlocked) =>
      super.noSuchMethod(
        Invocation.setter(
          #isCurrentSdkVersionBlocked,
          _isCurrentSdkVersionBlocked,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isCurrentAppVersionBlocked => (super.noSuchMethod(
        Invocation.getter(#isCurrentAppVersionBlocked),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set isCurrentAppVersionBlocked(bool? _isCurrentAppVersionBlocked) =>
      super.noSuchMethod(
        Invocation.setter(
          #isCurrentAppVersionBlocked,
          _isCurrentAppVersionBlocked,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get overrideUserConfig => (super.noSuchMethod(
        Invocation.getter(#overrideUserConfig),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i8.Future<void> runTasksAfterUpdate() => (super.noSuchMethod(
        Invocation.method(
          #runTasksAfterUpdate,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  void convertNativeValuesToFlutterValues() => super.noSuchMethod(
        Invocation.method(
          #convertNativeValuesToFlutterValues,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void localLogsEnablingLogic() => super.noSuchMethod(
        Invocation.method(
          #localLogsEnablingLogic,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool isThisScreenNameDisabledForTracking(String? screenName) =>
      (super.noSuchMethod(
        Invocation.method(
          #isThisScreenNameDisabledForTracking,
          [screenName],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isThisScreenNameSetToBeMasked(String? screenName) => (super.noSuchMethod(
        Invocation.method(
          #isThisScreenNameSetToBeMasked,
          [screenName],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void updateFromJson(Map<String, dynamic>? jsonData) => super.noSuchMethod(
        Invocation.method(
          #updateFromJson,
          [jsonData],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<void> updateFromPigeonClass(
          _i2.LiveConfigurationPigeon? liveConfigurationFromPigeon) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateFromPigeonClass,
          [liveConfigurationFromPigeon],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [EventChannelManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventChannelManager extends _i1.Mock
    implements _i31.EventChannelManager {
  @override
  _i15.PerformanceMetrics get performanceMetrics => (super.noSuchMethod(
        Invocation.getter(#performanceMetrics),
        returnValue: _FakePerformanceMetrics_16(
          this,
          Invocation.getter(#performanceMetrics),
        ),
        returnValueForMissingStub: _FakePerformanceMetrics_16(
          this,
          Invocation.getter(#performanceMetrics),
        ),
      ) as _i15.PerformanceMetrics);
  @override
  _i16.LiveConfiguration get liveConfiguration => (super.noSuchMethod(
        Invocation.getter(#liveConfiguration),
        returnValue: _FakeLiveConfiguration_17(
          this,
          Invocation.getter(#liveConfiguration),
        ),
        returnValueForMissingStub: _FakeLiveConfiguration_17(
          this,
          Invocation.getter(#liveConfiguration),
        ),
      ) as _i16.LiveConfiguration);
  @override
  void stopEventChannel() => super.noSuchMethod(
        Invocation.method(
          #stopEventChannel,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ScreenVisited].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockScreenVisited extends _i1.Mock implements _i14.ScreenVisited {
  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  int get timestamp => (super.noSuchMethod(
        Invocation.getter(#timestamp),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  bool get isTabBar => (super.noSuchMethod(
        Invocation.getter(#isTabBar),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  List<_i30.DxaRoute> get dxaRoutePath => (super.noSuchMethod(
        Invocation.getter(#dxaRoutePath),
        returnValue: <_i30.DxaRoute>[],
        returnValueForMissingStub: <_i30.DxaRoute>[],
      ) as List<_i30.DxaRoute>);
  @override
  List<_i30.DxaRoute> get allDetectedDxaRoutes => (super.noSuchMethod(
        Invocation.getter(#allDetectedDxaRoutes),
        returnValue: <_i30.DxaRoute>[],
        returnValueForMissingStub: <_i30.DxaRoute>[],
      ) as List<_i30.DxaRoute>);
  @override
  bool get isDialog => (super.noSuchMethod(
        Invocation.getter(#isDialog),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get recordingAllowed => (super.noSuchMethod(
        Invocation.getter(#recordingAllowed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get trackingAllowed => (super.noSuchMethod(
        Invocation.getter(#trackingAllowed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  List<_i14.ScreenShotTaken> get screenshotTakenList => (super.noSuchMethod(
        Invocation.getter(#screenshotTakenList),
        returnValue: <_i14.ScreenShotTaken>[],
        returnValueForMissingStub: <_i14.ScreenShotTaken>[],
      ) as List<_i14.ScreenShotTaken>);
  @override
  bool get finished => (super.noSuchMethod(
        Invocation.getter(#finished),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  List<_i30.DxaRoute> get forbiddenDxaRoutes => (super.noSuchMethod(
        Invocation.getter(#forbiddenDxaRoutes),
        returnValue: <_i30.DxaRoute>[],
        returnValueForMissingStub: <_i30.DxaRoute>[],
      ) as List<_i30.DxaRoute>);
  @override
  bool get isElementTreeDirty => (super.noSuchMethod(
        Invocation.getter(#isElementTreeDirty),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i6.Element get rootElementForAutomasking => (super.noSuchMethod(
        Invocation.getter(#rootElementForAutomasking),
        returnValue: _FakeElement_18(
          this,
          Invocation.getter(#rootElementForAutomasking),
        ),
        returnValueForMissingStub: _FakeElement_18(
          this,
          Invocation.getter(#rootElementForAutomasking),
        ),
      ) as _i6.Element);
  @override
  bool get areAllModalRoutes => (super.noSuchMethod(
        Invocation.getter(#areAllModalRoutes),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  int get uniqueId => (super.noSuchMethod(
        Invocation.getter(#uniqueId),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  _i14.ScreenVisitedFinished getScreenVisitedAsFinished(int? endTimestamp) =>
      (super.noSuchMethod(
        Invocation.method(
          #getScreenVisitedAsFinished,
          [endTimestamp],
        ),
        returnValue: _FakeScreenVisitedFinished_19(
          this,
          Invocation.method(
            #getScreenVisitedAsFinished,
            [endTimestamp],
          ),
        ),
        returnValueForMissingStub: _FakeScreenVisitedFinished_19(
          this,
          Invocation.method(
            #getScreenVisitedAsFinished,
            [endTimestamp],
          ),
        ),
      ) as _i14.ScreenVisitedFinished);
  @override
  _i14.ScreenVisited getScreenVisitedWithNewStartTimeStamp(
          int? startTimeStamp) =>
      (super.noSuchMethod(
        Invocation.method(
          #getScreenVisitedWithNewStartTimeStamp,
          [startTimeStamp],
        ),
        returnValue: _FakeScreenVisited_15(
          this,
          Invocation.method(
            #getScreenVisitedWithNewStartTimeStamp,
            [startTimeStamp],
          ),
        ),
        returnValueForMissingStub: _FakeScreenVisited_15(
          this,
          Invocation.method(
            #getScreenVisitedWithNewStartTimeStamp,
            [startTimeStamp],
          ),
        ),
      ) as _i14.ScreenVisited);
}

/// A class which mocks [ScreenVisitedFinished].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockScreenVisitedFinished extends _i1.Mock
    implements _i14.ScreenVisitedFinished {
  @override
  int get endTimestamp => (super.noSuchMethod(
        Invocation.getter(#endTimestamp),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  int get timestamp => (super.noSuchMethod(
        Invocation.getter(#timestamp),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  bool get isTabBar => (super.noSuchMethod(
        Invocation.getter(#isTabBar),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  List<_i30.DxaRoute> get dxaRoutePath => (super.noSuchMethod(
        Invocation.getter(#dxaRoutePath),
        returnValue: <_i30.DxaRoute>[],
        returnValueForMissingStub: <_i30.DxaRoute>[],
      ) as List<_i30.DxaRoute>);
  @override
  List<_i30.DxaRoute> get allDetectedDxaRoutes => (super.noSuchMethod(
        Invocation.getter(#allDetectedDxaRoutes),
        returnValue: <_i30.DxaRoute>[],
        returnValueForMissingStub: <_i30.DxaRoute>[],
      ) as List<_i30.DxaRoute>);
  @override
  bool get isDialog => (super.noSuchMethod(
        Invocation.getter(#isDialog),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get recordingAllowed => (super.noSuchMethod(
        Invocation.getter(#recordingAllowed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get trackingAllowed => (super.noSuchMethod(
        Invocation.getter(#trackingAllowed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  List<_i14.ScreenShotTaken> get screenshotTakenList => (super.noSuchMethod(
        Invocation.getter(#screenshotTakenList),
        returnValue: <_i14.ScreenShotTaken>[],
        returnValueForMissingStub: <_i14.ScreenShotTaken>[],
      ) as List<_i14.ScreenShotTaken>);
  @override
  bool get finished => (super.noSuchMethod(
        Invocation.getter(#finished),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  List<_i30.DxaRoute> get forbiddenDxaRoutes => (super.noSuchMethod(
        Invocation.getter(#forbiddenDxaRoutes),
        returnValue: <_i30.DxaRoute>[],
        returnValueForMissingStub: <_i30.DxaRoute>[],
      ) as List<_i30.DxaRoute>);
  @override
  bool get isElementTreeDirty => (super.noSuchMethod(
        Invocation.getter(#isElementTreeDirty),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i6.Element get rootElementForAutomasking => (super.noSuchMethod(
        Invocation.getter(#rootElementForAutomasking),
        returnValue: _FakeElement_18(
          this,
          Invocation.getter(#rootElementForAutomasking),
        ),
        returnValueForMissingStub: _FakeElement_18(
          this,
          Invocation.getter(#rootElementForAutomasking),
        ),
      ) as _i6.Element);
  @override
  bool get areAllModalRoutes => (super.noSuchMethod(
        Invocation.getter(#areAllModalRoutes),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  int get uniqueId => (super.noSuchMethod(
        Invocation.getter(#uniqueId),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  _i14.ScreenVisitedFinished getScreenVisitedAsFinished(int? endTimestamp) =>
      (super.noSuchMethod(
        Invocation.method(
          #getScreenVisitedAsFinished,
          [endTimestamp],
        ),
        returnValue: _FakeScreenVisitedFinished_19(
          this,
          Invocation.method(
            #getScreenVisitedAsFinished,
            [endTimestamp],
          ),
        ),
        returnValueForMissingStub: _FakeScreenVisitedFinished_19(
          this,
          Invocation.method(
            #getScreenVisitedAsFinished,
            [endTimestamp],
          ),
        ),
      ) as _i14.ScreenVisitedFinished);
  @override
  _i14.ScreenVisited getScreenVisitedWithNewStartTimeStamp(
          int? startTimeStamp) =>
      (super.noSuchMethod(
        Invocation.method(
          #getScreenVisitedWithNewStartTimeStamp,
          [startTimeStamp],
        ),
        returnValue: _FakeScreenVisited_15(
          this,
          Invocation.method(
            #getScreenVisitedWithNewStartTimeStamp,
            [startTimeStamp],
          ),
        ),
        returnValueForMissingStub: _FakeScreenVisited_15(
          this,
          Invocation.method(
            #getScreenVisitedWithNewStartTimeStamp,
            [startTimeStamp],
          ),
        ),
      ) as _i14.ScreenVisited);
}

/// A class which mocks [GlobalSettings].
///
/// See the documentation for Mockito's code generation for more information.
class MockGlobalSettings extends _i1.Mock implements _i18.GlobalSettings {
  @override
  _i16.LiveConfiguration get liveConfiguration => (super.noSuchMethod(
        Invocation.getter(#liveConfiguration),
        returnValue: _FakeLiveConfiguration_17(
          this,
          Invocation.getter(#liveConfiguration),
        ),
        returnValueForMissingStub: _FakeLiveConfiguration_17(
          this,
          Invocation.getter(#liveConfiguration),
        ),
      ) as _i16.LiveConfiguration);
  @override
  _i18.DefaultGlobalSettings get defaultGlobalSettings => (super.noSuchMethod(
        Invocation.getter(#defaultGlobalSettings),
        returnValue: _FakeDefaultGlobalSettings_20(
          this,
          Invocation.getter(#defaultGlobalSettings),
        ),
        returnValueForMissingStub: _FakeDefaultGlobalSettings_20(
          this,
          Invocation.getter(#defaultGlobalSettings),
        ),
      ) as _i18.DefaultGlobalSettings);
  @override
  set userMaxReplayDurationPerScreen(
          Duration? _userMaxReplayDurationPerScreen) =>
      super.noSuchMethod(
        Invocation.setter(
          #userMaxReplayDurationPerScreen,
          _userMaxReplayDurationPerScreen,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set userMaxScreenshotCount(int? _userMaxScreenshotCount) =>
      super.noSuchMethod(
        Invocation.setter(
          #userMaxScreenshotCount,
          _userMaxScreenshotCount,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set userMaskColor(_i12.Color? _userMaskColor) => super.noSuchMethod(
        Invocation.setter(
          #userMaskColor,
          _userMaskColor,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set userFrameRateInMiliseconds(Duration? _userFrameRateInMiliseconds) =>
      super.noSuchMethod(
        Invocation.setter(
          #userFrameRateInMiliseconds,
          _userFrameRateInMiliseconds,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set userImageQuality(_i32.ImageQuality? _userImageQuality) =>
      super.noSuchMethod(
        Invocation.setter(
          #userImageQuality,
          _userImageQuality,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Duration get maxReplayDurationPerScreen => (super.noSuchMethod(
        Invocation.getter(#maxReplayDurationPerScreen),
        returnValue: _FakeDuration_21(
          this,
          Invocation.getter(#maxReplayDurationPerScreen),
        ),
        returnValueForMissingStub: _FakeDuration_21(
          this,
          Invocation.getter(#maxReplayDurationPerScreen),
        ),
      ) as Duration);
  @override
  int get maxScreenshotCount => (super.noSuchMethod(
        Invocation.getter(#maxScreenshotCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  _i12.Color get maskColor => (super.noSuchMethod(
        Invocation.getter(#maskColor),
        returnValue: _FakeColor_22(
          this,
          Invocation.getter(#maskColor),
        ),
        returnValueForMissingStub: _FakeColor_22(
          this,
          Invocation.getter(#maskColor),
        ),
      ) as _i12.Color);
  @override
  Duration get frameRateInMiliseconds => (super.noSuchMethod(
        Invocation.getter(#frameRateInMiliseconds),
        returnValue: _FakeDuration_21(
          this,
          Invocation.getter(#frameRateInMiliseconds),
        ),
        returnValueForMissingStub: _FakeDuration_21(
          this,
          Invocation.getter(#frameRateInMiliseconds),
        ),
      ) as Duration);
  @override
  _i32.ImageQuality get imageQuality => (super.noSuchMethod(
        Invocation.getter(#imageQuality),
        returnValue: _i32.ImageQuality.poor,
        returnValueForMissingStub: _i32.ImageQuality.poor,
      ) as _i32.ImageQuality);
  @override
  T returnCorrectConfig<T>({
    required bool? overrideUserConfig,
    required T? userConfig,
    required T? liveConfig,
    required T? defaultConfig,
  }) =>
      throw UnsupportedError(
          r'"returnCorrectConfig" cannot be used without a mockito fallback generator.');
}

/// A class which mocks [RouteTreeConstructor].
///
/// See the documentation for Mockito's code generation for more information.
class MockRouteTreeConstructor extends _i1.Mock
    implements _i30.RouteTreeConstructor {
  @override
  Map<_i6.TransitionRoute<dynamic>, _i6.AnimationStatus>
      get routesWithActiveAnimation => (super.noSuchMethod(
            Invocation.getter(#routesWithActiveAnimation),
            returnValue: <_i6.TransitionRoute<dynamic>, _i6.AnimationStatus>{},
            returnValueForMissingStub: <_i6.TransitionRoute<dynamic>,
                _i6.AnimationStatus>{},
          ) as Map<_i6.TransitionRoute<dynamic>, _i6.AnimationStatus>);
  @override
  set lastRouterDelegatePath(String? _lastRouterDelegatePath) =>
      super.noSuchMethod(
        Invocation.setter(
          #lastRouterDelegatePath,
          _lastRouterDelegatePath,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i30.DxaRoute> get allDetectedDxaRoutes => (super.noSuchMethod(
        Invocation.getter(#allDetectedDxaRoutes),
        returnValue: <_i30.DxaRoute>[],
        returnValueForMissingStub: <_i30.DxaRoute>[],
      ) as List<_i30.DxaRoute>);
  @override
  set allDetectedDxaRoutes(List<_i30.DxaRoute>? _allDetectedDxaRoutes) =>
      super.noSuchMethod(
        Invocation.setter(
          #allDetectedDxaRoutes,
          _allDetectedDxaRoutes,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get homeScreenName => (super.noSuchMethod(
        Invocation.getter(#homeScreenName),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  set homeScreenName(String? _homeScreenName) => super.noSuchMethod(
        Invocation.setter(
          #homeScreenName,
          _homeScreenName,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get routerProvided => (super.noSuchMethod(
        Invocation.getter(#routerProvided),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void sendPotentialScreenVisitedToTrackingModule() => super.noSuchMethod(
        Invocation.method(
          #updateCurrentDxaRoutePath,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setRouterDelegate(_i6.RouterDelegate<dynamic>? routerDelegate) =>
      super.noSuchMethod(
        Invocation.method(
          #setRouterDelegate,
          [routerDelegate],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setRouterDelegateNameCallback(
          String Function()? routerDelegateNameCallback) =>
      super.noSuchMethod(
        Invocation.method(
          #setRouterDelegateNameCallback,
          [routerDelegateNameCallback],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.RouteObserver<_i6.Route<dynamic>> getNewObservers() =>
      (super.noSuchMethod(
        Invocation.method(
          #getNewObservers,
          [],
        ),
        returnValue: _FakeRouteObserver_23<_i6.Route<dynamic>>(
          this,
          Invocation.method(
            #getNewObservers,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeRouteObserver_23<_i6.Route<dynamic>>(
          this,
          Invocation.method(
            #getNewObservers,
            [],
          ),
        ),
      ) as _i6.RouteObserver<_i6.Route<dynamic>>);
  @override
  void pushedRoute(
    _i6.Route<dynamic>? route,
    _i6.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #pushedRoute,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void replacedRoute({
    _i6.Route<dynamic>? newRoute,
    _i6.Route<dynamic>? oldRoute,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #replacedRoute,
          [],
          {
            #newRoute: newRoute,
            #oldRoute: oldRoute,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void poppedRoute(
    _i6.Route<dynamic>? route,
    _i6.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #poppedRoute,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removedRoute(
    _i6.Route<dynamic>? route,
    _i6.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #removedRoute,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DxaRoute].
///
/// See the documentation for Mockito's code generation for more information.
class MockDxaRoute extends _i1.Mock implements _i30.DxaRoute {
  @override
  _i6.Route<dynamic> get route => (super.noSuchMethod(
        Invocation.getter(#route),
        returnValue: _FakeRoute_24<dynamic>(
          this,
          Invocation.getter(#route),
        ),
        returnValueForMissingStub: _FakeRoute_24<dynamic>(
          this,
          Invocation.getter(#route),
        ),
      ) as _i6.Route<dynamic>);
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  set changedName(String? _changedName) => super.noSuchMethod(
        Invocation.setter(
          #changedName,
          _changedName,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Map<String, String> get arguments => (super.noSuchMethod(
        Invocation.getter(#arguments),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);
  @override
  List<int> get nestedNavigatorsHashcode => (super.noSuchMethod(
        Invocation.getter(#nestedNavigatorsHashcode),
        returnValue: <int>[],
        returnValueForMissingStub: <int>[],
      ) as List<int>);
  @override
  int get navigatorOwnerHashcode => (super.noSuchMethod(
        Invocation.getter(#navigatorOwnerHashcode),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  _i6.BuildContext get navigatorContext => (super.noSuchMethod(
        Invocation.getter(#navigatorContext),
        returnValue: _FakeBuildContext_25(
          this,
          Invocation.getter(#navigatorContext),
        ),
        returnValueForMissingStub: _FakeBuildContext_25(
          this,
          Invocation.getter(#navigatorContext),
        ),
      ) as _i6.BuildContext);
  @override
  bool get isModalRoute => (super.noSuchMethod(
        Invocation.getter(#isModalRoute),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isOpaque => (super.noSuchMethod(
        Invocation.getter(#isOpaque),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isRouteSubtreeContextDirty => (super.noSuchMethod(
        Invocation.getter(#isRouteSubtreeContextDirty),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isThisRoutePainted => (super.noSuchMethod(
        Invocation.getter(#isThisRoutePainted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [Logger].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogger extends _i1.Mock implements _i9.Logger {
  @override
  void v(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #v,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void d(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #d,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void i(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #i,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void w(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #w,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void e(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #e,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void wtf(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #wtf,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void log(
    _i9.Level? level,
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #log,
          [
            level,
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool isClosed() => (super.noSuchMethod(
        Invocation.method(
          #isClosed,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i6.BuildContext {
  @override
  _i6.Widget get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeWidget_26(
          this,
          Invocation.getter(#widget),
        ),
        returnValueForMissingStub: _FakeWidget_26(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i6.Widget);
  @override
  bool get debugDoingBuild => (super.noSuchMethod(
        Invocation.getter(#debugDoingBuild),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i6.InheritedWidget dependOnInheritedElement(
    _i6.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependOnInheritedElement,
          [ancestor],
          {#aspect: aspect},
        ),
        returnValue: _FakeInheritedWidget_27(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
        returnValueForMissingStub: _FakeInheritedWidget_27(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
      ) as _i6.InheritedWidget);
  @override
  void visitAncestorElements(bool Function(_i6.Element)? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitAncestorElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void visitChildElements(_i6.ElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispatchNotification(_i6.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #dispatchNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i17.DiagnosticsNode describeElement(
    String? name, {
    _i17.DiagnosticsTreeStyle? style = _i17.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeElement,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_28(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_28(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
      ) as _i17.DiagnosticsNode);
  @override
  _i17.DiagnosticsNode describeWidget(
    String? name, {
    _i17.DiagnosticsTreeStyle? style = _i17.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeWidget,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_28(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_28(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
      ) as _i17.DiagnosticsNode);
  @override
  List<_i17.DiagnosticsNode> describeMissingAncestor(
          {required Type? expectedAncestorType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeMissingAncestor,
          [],
          {#expectedAncestorType: expectedAncestorType},
        ),
        returnValue: <_i17.DiagnosticsNode>[],
        returnValueForMissingStub: <_i17.DiagnosticsNode>[],
      ) as List<_i17.DiagnosticsNode>);
  @override
  _i17.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeOwnershipChain,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_28(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_28(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
      ) as _i17.DiagnosticsNode);
}

/// A class which mocks [SchedulerBinding].
///
/// See the documentation for Mockito's code generation for more information.
class MockSchedulerBinding extends _i1.Mock implements _i7.SchedulerBinding {
  @override
  _i7.SchedulingStrategy get schedulingStrategy => (super.noSuchMethod(
        Invocation.getter(#schedulingStrategy),
        returnValue: ({
          required int priority,
          required _i7.SchedulerBinding scheduler,
        }) =>
            false,
        returnValueForMissingStub: ({
          required int priority,
          required _i7.SchedulerBinding scheduler,
        }) =>
            false,
      ) as _i7.SchedulingStrategy);
  @override
  set schedulingStrategy(_i7.SchedulingStrategy? _schedulingStrategy) =>
      super.noSuchMethod(
        Invocation.setter(
          #schedulingStrategy,
          _schedulingStrategy,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get transientCallbackCount => (super.noSuchMethod(
        Invocation.getter(#transientCallbackCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  _i8.Future<void> get endOfFrame => (super.noSuchMethod(
        Invocation.getter(#endOfFrame),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  bool get hasScheduledFrame => (super.noSuchMethod(
        Invocation.getter(#hasScheduledFrame),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i7.SchedulerPhase get schedulerPhase => (super.noSuchMethod(
        Invocation.getter(#schedulerPhase),
        returnValue: _i7.SchedulerPhase.idle,
        returnValueForMissingStub: _i7.SchedulerPhase.idle,
      ) as _i7.SchedulerPhase);
  @override
  bool get framesEnabled => (super.noSuchMethod(
        Invocation.getter(#framesEnabled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  Duration get currentFrameTimeStamp => (super.noSuchMethod(
        Invocation.getter(#currentFrameTimeStamp),
        returnValue: _FakeDuration_21(
          this,
          Invocation.getter(#currentFrameTimeStamp),
        ),
        returnValueForMissingStub: _FakeDuration_21(
          this,
          Invocation.getter(#currentFrameTimeStamp),
        ),
      ) as Duration);
  @override
  Duration get currentSystemFrameTimeStamp => (super.noSuchMethod(
        Invocation.getter(#currentSystemFrameTimeStamp),
        returnValue: _FakeDuration_21(
          this,
          Invocation.getter(#currentSystemFrameTimeStamp),
        ),
        returnValueForMissingStub: _FakeDuration_21(
          this,
          Invocation.getter(#currentSystemFrameTimeStamp),
        ),
      ) as Duration);
  @override
  _i12.SingletonFlutterWindow get window => (super.noSuchMethod(
        Invocation.getter(#window),
        returnValue: _FakeSingletonFlutterWindow_29(
          this,
          Invocation.getter(#window),
        ),
        returnValueForMissingStub: _FakeSingletonFlutterWindow_29(
          this,
          Invocation.getter(#window),
        ),
      ) as _i12.SingletonFlutterWindow);
  @override
  _i12.PlatformDispatcher get platformDispatcher => (super.noSuchMethod(
        Invocation.getter(#platformDispatcher),
        returnValue: _FakePlatformDispatcher_30(
          this,
          Invocation.getter(#platformDispatcher),
        ),
        returnValueForMissingStub: _FakePlatformDispatcher_30(
          this,
          Invocation.getter(#platformDispatcher),
        ),
      ) as _i12.PlatformDispatcher);
  @override
  bool get locked => (super.noSuchMethod(
        Invocation.getter(#locked),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void initInstances() => super.noSuchMethod(
        Invocation.method(
          #initInstances,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addTimingsCallback(_i12.TimingsCallback? callback) => super.noSuchMethod(
        Invocation.method(
          #addTimingsCallback,
          [callback],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeTimingsCallback(_i12.TimingsCallback? callback) =>
      super.noSuchMethod(
        Invocation.method(
          #removeTimingsCallback,
          [callback],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void initServiceExtensions() => super.noSuchMethod(
        Invocation.method(
          #initServiceExtensions,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void handleAppLifecycleStateChanged(_i12.AppLifecycleState? state) =>
      super.noSuchMethod(
        Invocation.method(
          #handleAppLifecycleStateChanged,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<T> scheduleTask<T>(
    _i7.TaskCallback<T>? task,
    _i7.Priority? priority, {
    String? debugLabel,
    _i33.Flow? flow,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #scheduleTask,
          [
            task,
            priority,
          ],
          {
            #debugLabel: debugLabel,
            #flow: flow,
          },
        ),
        returnValue: _FakeFuture_9<T>(
          this,
          Invocation.method(
            #scheduleTask,
            [
              task,
              priority,
            ],
            {
              #debugLabel: debugLabel,
              #flow: flow,
            },
          ),
        ),
        returnValueForMissingStub: _FakeFuture_9<T>(
          this,
          Invocation.method(
            #scheduleTask,
            [
              task,
              priority,
            ],
            {
              #debugLabel: debugLabel,
              #flow: flow,
            },
          ),
        ),
      ) as _i8.Future<T>);
  @override
  void unlocked() => super.noSuchMethod(
        Invocation.method(
          #unlocked,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool handleEventLoopCallback() => (super.noSuchMethod(
        Invocation.method(
          #handleEventLoopCallback,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  int scheduleFrameCallback(
    _i7.FrameCallback? callback, {
    bool? rescheduling = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #scheduleFrameCallback,
          [callback],
          {#rescheduling: rescheduling},
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  void cancelFrameCallbackWithId(int? id) => super.noSuchMethod(
        Invocation.method(
          #cancelFrameCallbackWithId,
          [id],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool debugAssertNoTransientCallbacks(String? reason) => (super.noSuchMethod(
        Invocation.method(
          #debugAssertNoTransientCallbacks,
          [reason],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void addPersistentFrameCallback(_i7.FrameCallback? callback) =>
      super.noSuchMethod(
        Invocation.method(
          #addPersistentFrameCallback,
          [callback],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addPostFrameCallback(_i7.FrameCallback? callback) => super.noSuchMethod(
        Invocation.method(
          #addPostFrameCallback,
          [callback],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void ensureFrameCallbacksRegistered() => super.noSuchMethod(
        Invocation.method(
          #ensureFrameCallbacksRegistered,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void ensureVisualUpdate() => super.noSuchMethod(
        Invocation.method(
          #ensureVisualUpdate,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void scheduleFrame() => super.noSuchMethod(
        Invocation.method(
          #scheduleFrame,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void scheduleForcedFrame() => super.noSuchMethod(
        Invocation.method(
          #scheduleForcedFrame,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void scheduleWarmUpFrame() => super.noSuchMethod(
        Invocation.method(
          #scheduleWarmUpFrame,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void resetEpoch() => super.noSuchMethod(
        Invocation.method(
          #resetEpoch,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void handleBeginFrame(Duration? rawTimeStamp) => super.noSuchMethod(
        Invocation.method(
          #handleBeginFrame,
          [rawTimeStamp],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void handleDrawFrame() => super.noSuchMethod(
        Invocation.method(
          #handleDrawFrame,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<void> lockEvents(_i8.Future<void> Function()? callback) =>
      (super.noSuchMethod(
        Invocation.method(
          #lockEvents,
          [callback],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> reassembleApplication() => (super.noSuchMethod(
        Invocation.method(
          #reassembleApplication,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> performReassemble() => (super.noSuchMethod(
        Invocation.method(
          #performReassemble,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  void registerSignalServiceExtension({
    required String? name,
    required _i17.AsyncCallback? callback,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerSignalServiceExtension,
          [],
          {
            #name: name,
            #callback: callback,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void registerBoolServiceExtension({
    required String? name,
    required _i17.AsyncValueGetter<bool>? getter,
    required _i17.AsyncValueSetter<bool>? setter,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerBoolServiceExtension,
          [],
          {
            #name: name,
            #getter: getter,
            #setter: setter,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void registerNumericServiceExtension({
    required String? name,
    required _i17.AsyncValueGetter<double>? getter,
    required _i17.AsyncValueSetter<double>? setter,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerNumericServiceExtension,
          [],
          {
            #name: name,
            #getter: getter,
            #setter: setter,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void postEvent(
    String? eventKind,
    Map<String, dynamic>? eventData,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #postEvent,
          [
            eventKind,
            eventData,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void registerStringServiceExtension({
    required String? name,
    required _i17.AsyncValueGetter<String>? getter,
    required _i17.AsyncValueSetter<String>? setter,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerStringServiceExtension,
          [],
          {
            #name: name,
            #getter: getter,
            #setter: setter,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void registerServiceExtension({
    required String? name,
    required _i17.ServiceExtensionCallback? callback,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerServiceExtension,
          [],
          {
            #name: name,
            #callback: callback,
          },
        ),
        returnValueForMissingStub: null,
      );
}
