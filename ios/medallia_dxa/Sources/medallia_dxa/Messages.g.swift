// Autogenerated from Pigeon (v17.1.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct StartScreenMessagePigeon {
  var screenName: String
  var screenId: Int64
  var startTime: Int64
  var isBackground: Bool

  static func fromList(_ list: [Any?]) -> StartScreenMessagePigeon? {
    let screenName = list[0] as! String
    let screenId = list[1] is Int64 ? list[1] as! Int64 : Int64(list[1] as! Int32)
    let startTime = list[2] is Int64 ? list[2] as! Int64 : Int64(list[2] as! Int32)
    let isBackground = list[3] as! Bool

    return StartScreenMessagePigeon(
      screenName: screenName,
      screenId: screenId,
      startTime: startTime,
      isBackground: isBackground
    )
  }
  func toList() -> [Any?] {
    return [
      screenName,
      screenId,
      startTime,
      isBackground,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct EndScreenMessagePigeon {
  var screenName: String
  var screenId: Int64
  var endTime: Int64
  var screenRecordingEndTime: Int64
  var isBackground: Bool

  static func fromList(_ list: [Any?]) -> EndScreenMessagePigeon? {
    let screenName = list[0] as! String
    let screenId = list[1] is Int64 ? list[1] as! Int64 : Int64(list[1] as! Int32)
    let endTime = list[2] is Int64 ? list[2] as! Int64 : Int64(list[2] as! Int32)
    let screenRecordingEndTime = list[3] is Int64 ? list[3] as! Int64 : Int64(list[3] as! Int32)
    let isBackground = list[4] as! Bool

    return EndScreenMessagePigeon(
      screenName: screenName,
      screenId: screenId,
      endTime: endTime,
      screenRecordingEndTime: screenRecordingEndTime,
      isBackground: isBackground
    )
  }
  func toList() -> [Any?] {
    return [
      screenName,
      screenId,
      endTime,
      screenRecordingEndTime,
      isBackground,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct SessionMessagePigeon {
  var account: Int64
  var property: Int64
  var consents: Int64
  var version: String
  var crashReporterEnabled: Bool
  var mobileDataEnabled: Bool
  var enhancedLogs: Bool

  static func fromList(_ list: [Any?]) -> SessionMessagePigeon? {
    let account = list[0] is Int64 ? list[0] as! Int64 : Int64(list[0] as! Int32)
    let property = list[1] is Int64 ? list[1] as! Int64 : Int64(list[1] as! Int32)
    let consents = list[2] is Int64 ? list[2] as! Int64 : Int64(list[2] as! Int32)
    let version = list[3] as! String
    let crashReporterEnabled = list[4] as! Bool
    let mobileDataEnabled = list[5] as! Bool
    let enhancedLogs = list[6] as! Bool

    return SessionMessagePigeon(
      account: account,
      property: property,
      consents: consents,
      version: version,
      crashReporterEnabled: crashReporterEnabled,
      mobileDataEnabled: mobileDataEnabled,
      enhancedLogs: enhancedLogs
    )
  }
  func toList() -> [Any?] {
    return [
      account,
      property,
      consents,
      version,
      crashReporterEnabled,
      mobileDataEnabled,
      enhancedLogs,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ScreenshotMessagePigeon {
  var screenshotData: FlutterStandardTypedData
  var screenId: Int64
  var screenName: String
  var startFocusTime: Int64
  var isPlaceholder: Bool

  static func fromList(_ list: [Any?]) -> ScreenshotMessagePigeon? {
    let screenshotData = list[0] as! FlutterStandardTypedData
    let screenId = list[1] is Int64 ? list[1] as! Int64 : Int64(list[1] as! Int32)
    let screenName = list[2] as! String
    let startFocusTime = list[3] is Int64 ? list[3] as! Int64 : Int64(list[3] as! Int32)
    let isPlaceholder = list[4] as! Bool

    return ScreenshotMessagePigeon(
      screenshotData: screenshotData,
      screenId: screenId,
      screenName: screenName,
      startFocusTime: startFocusTime,
      isPlaceholder: isPlaceholder
    )
  }
  func toList() -> [Any?] {
    return [
      screenshotData,
      screenId,
      screenName,
      startFocusTime,
      isPlaceholder,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct DimensionStringMessagePigeon {
  var dimensionName: String
  var value: String

  static func fromList(_ list: [Any?]) -> DimensionStringMessagePigeon? {
    let dimensionName = list[0] as! String
    let value = list[1] as! String

    return DimensionStringMessagePigeon(
      dimensionName: dimensionName,
      value: value
    )
  }
  func toList() -> [Any?] {
    return [
      dimensionName,
      value,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct DimensionNumberMessagePigeon {
  var dimensionName: String
  var value: Double

  static func fromList(_ list: [Any?]) -> DimensionNumberMessagePigeon? {
    let dimensionName = list[0] as! String
    let value = list[1] as! Double

    return DimensionNumberMessagePigeon(
      dimensionName: dimensionName,
      value: value
    )
  }
  func toList() -> [Any?] {
    return [
      dimensionName,
      value,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct DimensionBoolMessagePigeon {
  var dimensionName: String
  var value: Bool

  static func fromList(_ list: [Any?]) -> DimensionBoolMessagePigeon? {
    let dimensionName = list[0] as! String
    let value = list[1] as! Bool

    return DimensionBoolMessagePigeon(
      dimensionName: dimensionName,
      value: value
    )
  }
  func toList() -> [Any?] {
    return [
      dimensionName,
      value,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct GoalMessagePigeon {
  var goal: String
  var value: Double? = nil

  static func fromList(_ list: [Any?]) -> GoalMessagePigeon? {
    let goal = list[0] as! String
    let value: Double? = nilOrValue(list[1])

    return GoalMessagePigeon(
      goal: goal,
      value: value
    )
  }
  func toList() -> [Any?] {
    return [
      goal,
      value,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct LiveConfigurationFromInitializePigeon {
  var overrideUserConfig: Bool? = nil
  var blockedFlutterSDKVersions: [String?]? = nil
  var blockedFlutterAppVersions: [String?]? = nil
  var blockedNativeSDKVersions: [String?]? = nil
  var maskingColor: String? = nil
  var showLocalLogs: Bool? = nil
  var allowLocalLogs: Bool? = nil
  var imageQualityType: Int64? = nil
  var videoQualityType: Int64? = nil
  var disableScreenTracking: [String?]? = nil
  var screensMasking: [String?]? = nil
  var appVersion: String? = nil
  var nativeSDKVersion: String? = nil

  static func fromList(_ list: [Any?]) -> LiveConfigurationFromInitializePigeon? {
    let overrideUserConfig: Bool? = nilOrValue(list[0])
    let blockedFlutterSDKVersions: [String?]? = nilOrValue(list[1])
    let blockedFlutterAppVersions: [String?]? = nilOrValue(list[2])
    let blockedNativeSDKVersions: [String?]? = nilOrValue(list[3])
    let maskingColor: String? = nilOrValue(list[4])
    let showLocalLogs: Bool? = nilOrValue(list[5])
    let allowLocalLogs: Bool? = nilOrValue(list[6])
    let imageQualityType: Int64? = isNullish(list[7]) ? nil : (list[7] is Int64? ? list[7] as! Int64? : Int64(list[7] as! Int32))
    let videoQualityType: Int64? = isNullish(list[8]) ? nil : (list[8] is Int64? ? list[8] as! Int64? : Int64(list[8] as! Int32))
    let disableScreenTracking: [String?]? = nilOrValue(list[9])
    let screensMasking: [String?]? = nilOrValue(list[10])
    let appVersion: String? = nilOrValue(list[11])
    let nativeSDKVersion: String? = nilOrValue(list[12])

    return LiveConfigurationFromInitializePigeon(
      overrideUserConfig: overrideUserConfig,
      blockedFlutterSDKVersions: blockedFlutterSDKVersions,
      blockedFlutterAppVersions: blockedFlutterAppVersions,
      blockedNativeSDKVersions: blockedNativeSDKVersions,
      maskingColor: maskingColor,
      showLocalLogs: showLocalLogs,
      allowLocalLogs: allowLocalLogs,
      imageQualityType: imageQualityType,
      videoQualityType: videoQualityType,
      disableScreenTracking: disableScreenTracking,
      screensMasking: screensMasking,
      appVersion: appVersion,
      nativeSDKVersion: nativeSDKVersion
    )
  }
  func toList() -> [Any?] {
    return [
      overrideUserConfig,
      blockedFlutterSDKVersions,
      blockedFlutterAppVersions,
      blockedNativeSDKVersions,
      maskingColor,
      showLocalLogs,
      allowLocalLogs,
      imageQualityType,
      videoQualityType,
      disableScreenTracking,
      screensMasking,
      appVersion,
      nativeSDKVersion,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct TouchDetailNativeClassPigeon {
  var y: Int64
  var cf: Int64
  var x: Int64
  var pID: Int64? = nil
  var oX: Int64? = nil
  var oY: Int64? = nil
  var sID: Int64? = nil

  static func fromList(_ list: [Any?]) -> TouchDetailNativeClassPigeon? {
    let y = list[0] is Int64 ? list[0] as! Int64 : Int64(list[0] as! Int32)
    let cf = list[1] is Int64 ? list[1] as! Int64 : Int64(list[1] as! Int32)
    let x = list[2] is Int64 ? list[2] as! Int64 : Int64(list[2] as! Int32)
    let pID: Int64? = isNullish(list[3]) ? nil : (list[3] is Int64? ? list[3] as! Int64? : Int64(list[3] as! Int32))
    let oX: Int64? = isNullish(list[4]) ? nil : (list[4] is Int64? ? list[4] as! Int64? : Int64(list[4] as! Int32))
    let oY: Int64? = isNullish(list[5]) ? nil : (list[5] is Int64? ? list[5] as! Int64? : Int64(list[5] as! Int32))
    let sID: Int64? = isNullish(list[6]) ? nil : (list[6] is Int64? ? list[6] as! Int64? : Int64(list[6] as! Int32))

    return TouchDetailNativeClassPigeon(
      y: y,
      cf: cf,
      x: x,
      pID: pID,
      oX: oX,
      oY: oY,
      sID: sID
    )
  }
  func toList() -> [Any?] {
    return [
      y,
      cf,
      x,
      pID,
      oX,
      oY,
      sID,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct TouchEventNativeClassPigeon {
  var o: Int64
  var d: [TouchDetailNativeClassPigeon?]
  var t: Int64

  static func fromList(_ list: [Any?]) -> TouchEventNativeClassPigeon? {
    let o = list[0] is Int64 ? list[0] as! Int64 : Int64(list[0] as! Int32)
    let d = list[1] as! [TouchDetailNativeClassPigeon?]
    let t = list[2] is Int64 ? list[2] as! Int64 : Int64(list[2] as! Int32)

    return TouchEventNativeClassPigeon(
      o: o,
      d: d,
      t: t
    )
  }
  func toList() -> [Any?] {
    return [
      o,
      d,
      t,
    ]
  }
}

private class MedalliaDxaNativeApiPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return DimensionBoolMessagePigeon.fromList(self.readValue() as! [Any?])
    case 129:
      return DimensionNumberMessagePigeon.fromList(self.readValue() as! [Any?])
    case 130:
      return DimensionStringMessagePigeon.fromList(self.readValue() as! [Any?])
    case 131:
      return EndScreenMessagePigeon.fromList(self.readValue() as! [Any?])
    case 132:
      return GoalMessagePigeon.fromList(self.readValue() as! [Any?])
    case 133:
      return LiveConfigurationFromInitializePigeon.fromList(self.readValue() as! [Any?])
    case 134:
      return ScreenshotMessagePigeon.fromList(self.readValue() as! [Any?])
    case 135:
      return SessionMessagePigeon.fromList(self.readValue() as! [Any?])
    case 136:
      return StartScreenMessagePigeon.fromList(self.readValue() as! [Any?])
    case 137:
      return TouchDetailNativeClassPigeon.fromList(self.readValue() as! [Any?])
    case 138:
      return TouchEventNativeClassPigeon.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class MedalliaDxaNativeApiPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? DimensionBoolMessagePigeon {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? DimensionNumberMessagePigeon {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? DimensionStringMessagePigeon {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? EndScreenMessagePigeon {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? GoalMessagePigeon {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? LiveConfigurationFromInitializePigeon {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? ScreenshotMessagePigeon {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? SessionMessagePigeon {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? StartScreenMessagePigeon {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else if let value = value as? TouchDetailNativeClassPigeon {
      super.writeByte(137)
      super.writeValue(value.toList())
    } else if let value = value as? TouchEventNativeClassPigeon {
      super.writeByte(138)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class MedalliaDxaNativeApiPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MedalliaDxaNativeApiPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MedalliaDxaNativeApiPigeonCodecWriter(data: data)
  }
}

class MedalliaDxaNativeApiPigeonCodec: FlutterStandardMessageCodec {
  static let shared = MedalliaDxaNativeApiPigeonCodec(readerWriter: MedalliaDxaNativeApiPigeonCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol MedalliaDxaNativeApiPigeon {
  func initialize(msg: SessionMessagePigeon, completion: @escaping (Result<LiveConfigurationFromInitializePigeon, Error>) -> Void)
  func startScreen(msg: StartScreenMessagePigeon, completion: @escaping (Result<Void, Error>) -> Void)
  func endScreen(msg: EndScreenMessagePigeon, completion: @escaping (Result<Void, Error>) -> Void)
  func setConsents(value: Int64) throws
  func saveScreenshot(msg: ScreenshotMessagePigeon, completion: @escaping (Result<Void, Error>) -> Void)
  func sendDimensionWithString(msg: DimensionStringMessagePigeon) throws
  func sendDimensionWithNumber(msg: DimensionNumberMessagePigeon) throws
  func sendDimensionWithBool(msg: DimensionBoolMessagePigeon) throws
  func sendGoal(msg: GoalMessagePigeon) throws
  func sendError(errorMessage: String) throws
  func sendDataOverWifiOnly(value: Bool) throws
  func sendHttpError(msg: Int64) throws
  func sendImageQuality(imageQuality: Int64) throws
  func setRetention(value: Bool) throws
  func saveLog(log: String) throws
  func sendTouchEvents(touchEvents: [TouchEventNativeClassPigeon], completion: @escaping (Result<Void, Error>) -> Void)
  func getWebViewProperties(completion: @escaping (Result<String, Error>) -> Void)
  func getSessionId(completion: @escaping (Result<String, Error>) -> Void)
  func getSessionUrl(completion: @escaping (Result<String, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class MedalliaDxaNativeApiPigeonSetup {
  /// The codec used by MedalliaDxaNativeApiPigeon.
  static var codec: FlutterStandardMessageCodec { MedalliaDxaNativeApiPigeonCodec.shared }
  /// Sets up an instance of `MedalliaDxaNativeApiPigeon` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: MedalliaDxaNativeApiPigeon?) {
    let initializeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.medallia_dxa.MedalliaDxaNativeApiPigeon.initialize", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let msgArg = args[0] as! SessionMessagePigeon
        api.initialize(msg: msgArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      initializeChannel.setMessageHandler(nil)
    }
    let startScreenChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.medallia_dxa.MedalliaDxaNativeApiPigeon.startScreen", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startScreenChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let msgArg = args[0] as! StartScreenMessagePigeon
        api.startScreen(msg: msgArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startScreenChannel.setMessageHandler(nil)
    }
    let endScreenChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.medallia_dxa.MedalliaDxaNativeApiPigeon.endScreen", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      endScreenChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let msgArg = args[0] as! EndScreenMessagePigeon
        api.endScreen(msg: msgArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      endScreenChannel.setMessageHandler(nil)
    }
    let setConsentsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.medallia_dxa.MedalliaDxaNativeApiPigeon.setConsents", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setConsentsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let valueArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        do {
          try api.setConsents(value: valueArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setConsentsChannel.setMessageHandler(nil)
    }
    let saveScreenshotChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.medallia_dxa.MedalliaDxaNativeApiPigeon.saveScreenshot", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      saveScreenshotChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let msgArg = args[0] as! ScreenshotMessagePigeon
        api.saveScreenshot(msg: msgArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      saveScreenshotChannel.setMessageHandler(nil)
    }
    let sendDimensionWithStringChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.medallia_dxa.MedalliaDxaNativeApiPigeon.sendDimensionWithString", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sendDimensionWithStringChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let msgArg = args[0] as! DimensionStringMessagePigeon
        do {
          try api.sendDimensionWithString(msg: msgArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      sendDimensionWithStringChannel.setMessageHandler(nil)
    }
    let sendDimensionWithNumberChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.medallia_dxa.MedalliaDxaNativeApiPigeon.sendDimensionWithNumber", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sendDimensionWithNumberChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let msgArg = args[0] as! DimensionNumberMessagePigeon
        do {
          try api.sendDimensionWithNumber(msg: msgArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      sendDimensionWithNumberChannel.setMessageHandler(nil)
    }
    let sendDimensionWithBoolChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.medallia_dxa.MedalliaDxaNativeApiPigeon.sendDimensionWithBool", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sendDimensionWithBoolChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let msgArg = args[0] as! DimensionBoolMessagePigeon
        do {
          try api.sendDimensionWithBool(msg: msgArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      sendDimensionWithBoolChannel.setMessageHandler(nil)
    }
    let sendGoalChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.medallia_dxa.MedalliaDxaNativeApiPigeon.sendGoal", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sendGoalChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let msgArg = args[0] as! GoalMessagePigeon
        do {
          try api.sendGoal(msg: msgArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      sendGoalChannel.setMessageHandler(nil)
    }
    let sendErrorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.medallia_dxa.MedalliaDxaNativeApiPigeon.sendError", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sendErrorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let errorMessageArg = args[0] as! String
        do {
          try api.sendError(errorMessage: errorMessageArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      sendErrorChannel.setMessageHandler(nil)
    }
    let sendDataOverWifiOnlyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.medallia_dxa.MedalliaDxaNativeApiPigeon.sendDataOverWifiOnly", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sendDataOverWifiOnlyChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let valueArg = args[0] as! Bool
        do {
          try api.sendDataOverWifiOnly(value: valueArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      sendDataOverWifiOnlyChannel.setMessageHandler(nil)
    }
    let sendHttpErrorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.medallia_dxa.MedalliaDxaNativeApiPigeon.sendHttpError", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sendHttpErrorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let msgArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        do {
          try api.sendHttpError(msg: msgArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      sendHttpErrorChannel.setMessageHandler(nil)
    }
    let sendImageQualityChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.medallia_dxa.MedalliaDxaNativeApiPigeon.sendImageQuality", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sendImageQualityChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let imageQualityArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        do {
          try api.sendImageQuality(imageQuality: imageQualityArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      sendImageQualityChannel.setMessageHandler(nil)
    }
    let setRetentionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.medallia_dxa.MedalliaDxaNativeApiPigeon.setRetention", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setRetentionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let valueArg = args[0] as! Bool
        do {
          try api.setRetention(value: valueArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setRetentionChannel.setMessageHandler(nil)
    }
    let saveLogChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.medallia_dxa.MedalliaDxaNativeApiPigeon.saveLog", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      saveLogChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let logArg = args[0] as! String
        do {
          try api.saveLog(log: logArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      saveLogChannel.setMessageHandler(nil)
    }
    let sendTouchEventsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.medallia_dxa.MedalliaDxaNativeApiPigeon.sendTouchEvents", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sendTouchEventsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let touchEventsArg = args[0] as! [TouchEventNativeClassPigeon]
        api.sendTouchEvents(touchEvents: touchEventsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      sendTouchEventsChannel.setMessageHandler(nil)
    }
    let getWebViewPropertiesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.medallia_dxa.MedalliaDxaNativeApiPigeon.getWebViewProperties", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getWebViewPropertiesChannel.setMessageHandler { _, reply in
        api.getWebViewProperties { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getWebViewPropertiesChannel.setMessageHandler(nil)
    }
    let getSessionIdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.medallia_dxa.MedalliaDxaNativeApiPigeon.getSessionId", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getSessionIdChannel.setMessageHandler { _, reply in
        api.getSessionId { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getSessionIdChannel.setMessageHandler(nil)
    }
    let getSessionUrlChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.medallia_dxa.MedalliaDxaNativeApiPigeon.getSessionUrl", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getSessionUrlChannel.setMessageHandler { _, reply in
        api.getSessionUrl { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getSessionUrlChannel.setMessageHandler(nil)
    }
  }
}
